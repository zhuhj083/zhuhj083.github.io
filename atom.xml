<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m somebody</title>
  
  <subtitle>任重而道远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http:zhuhaijun.cn/"/>
  <updated>2018-12-24T11:09:46.607Z</updated>
  <id>http:zhuhaijun.cn/</id>
  
  <author>
    <name>Zhu Haijun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python制作微信好友照片墙</title>
    <link href="http:zhuhaijun.cn/2018/12/24/python%E5%88%B6%E4%BD%9C%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E7%85%A7%E7%89%87%E5%A2%99/"/>
    <id>http:zhuhaijun.cn/2018/12/24/python制作微信好友照片墙/</id>
    <published>2018-12-24T11:08:52.000Z</published>
    <updated>2018-12-24T11:09:46.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装itchat和pillow库"><a href="#安装itchat和pillow库" class="headerlink" title="安装itchat和pillow库"></a>安装itchat和pillow库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install itchat</span><br><span class="line">sudo pip install pillow</span><br></pre></td></tr></table></figure><h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><p>wechat_head_img.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import itchat</span><br><span class="line">import math</span><br><span class="line">import os</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">itchat.auto_login(hotReload=True)</span><br><span class="line">friends = itchat.get_friends(update=True)</span><br><span class="line"></span><br><span class="line">num = 0</span><br><span class="line"><span class="keyword">if</span> not os.path.exists(<span class="string">"headImg"</span>):</span><br><span class="line">    os.mkdir(<span class="string">"headImg"</span>)</span><br><span class="line"><span class="keyword">for</span> friend  <span class="keyword">in</span> friends:</span><br><span class="line">    img = itchat.get_head_img(userName=friend[<span class="string">"UserName"</span>])</span><br><span class="line">    <span class="keyword">if</span> len(img) == 0:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"skip %d,friend=%s"</span> % (num,friend[<span class="string">"NickName"</span>]) )</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%d,friend=%s"</span> % (num,friend[<span class="string">"NickName"</span>]))</span><br><span class="line">    fileImage = open(<span class="string">'headImg'</span> + <span class="string">"/"</span> + str(num) + <span class="string">".jpg"</span>,<span class="string">'web'</span>)</span><br><span class="line">    fileImage.write(img)</span><br><span class="line">    fileImage.close()</span><br><span class="line">    num += 1</span><br><span class="line"></span><br><span class="line">all_image = os.listdir(<span class="string">'headImg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"There %d images"</span> % len(all_image))</span><br><span class="line">each_size = int(math.sqrt(<span class="built_in">float</span>(640*640)/len(all_image)))</span><br><span class="line">lines = int(640 / each_size)</span><br><span class="line">image = Image.new(<span class="string">'RGBA'</span>,(640,640))</span><br><span class="line">x = 0</span><br><span class="line">y = 0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(all_image)):</span><br><span class="line">    imagePath = <span class="string">'headImg'</span>+<span class="string">"/"</span>+str(i) + <span class="string">".jpg"</span></span><br><span class="line">    <span class="keyword">if</span> not os.path.isfile(imagePath):</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    img = Image.open(imagePath)</span><br><span class="line">    img = img.resize((each_size,each_size),Image.ANTIALIAS)</span><br><span class="line">    image.paste( img , (x*each_size,y*each_size) )</span><br><span class="line">    x += 1</span><br><span class="line">    <span class="keyword">if</span> x == lines:</span><br><span class="line">        x = 0</span><br><span class="line">        y += 1</span><br><span class="line"></span><br><span class="line">image = image.convert(<span class="string">'RGB'</span>)</span><br><span class="line">image.save(<span class="string">'headImg'</span>+<span class="string">"/"</span>+<span class="string">"all.jpg"</span>)</span><br><span class="line">itchat.send_image(<span class="string">'headImg'</span>+<span class="string">"/"</span>+<span class="string">"all.jpg"</span> , <span class="string">'filehelper'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="直接执行"><a href="#直接执行" class="headerlink" title="直接执行"></a>直接执行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">sudo chmod +x wechat_head_img.py</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">python wechat_head_img.py</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装itchat和pillow库&quot;&gt;&lt;a href=&quot;#安装itchat和pillow库&quot; class=&quot;headerlink&quot; title=&quot;安装itchat和pillow库&quot;&gt;&lt;/a&gt;安装itchat和pillow库&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
      <category term="wechat" scheme="http:zhuhaijun.cn/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title># 安装itchat和pillow库</title>
    <link href="http:zhuhaijun.cn/2018/12/24/python%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA%EF%BC%8CAI%E6%99%BA%E8%83%BD%E5%9B%9E%E5%A4%8D/"/>
    <id>http:zhuhaijun.cn/2018/12/24/python实现微信机器人，AI智能回复/</id>
    <published>2018-12-24T11:08:06.000Z</published>
    <updated>2018-12-24T11:08:07.011Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac teminal ssh 免密码</title>
    <link href="http:zhuhaijun.cn/2018/12/21/Mac-teminal-ssh-%E5%85%8D%E5%AF%86%E7%A0%81/"/>
    <id>http:zhuhaijun.cn/2018/12/21/Mac-teminal-ssh-免密码/</id>
    <published>2018-12-21T11:13:16.000Z</published>
    <updated>2018-12-21T11:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、创建expect脚本"><a href="#一、创建expect脚本" class="headerlink" title="一、创建expect脚本"></a>一、创建expect脚本</h1><ol><li><p>在/usr/local/bin目录下创建item2ssh.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 15</span><br><span class="line"><span class="built_in">set</span> port [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> username [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> host [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> passwd [lindex <span class="variable">$argv</span> 3]</span><br><span class="line">spawn ssh -p <span class="variable">$port</span> <span class="variable">$username</span>@<span class="variable">$host</span></span><br><span class="line">expect &#123;</span><br><span class="line">        <span class="string">"(yes/no)?"</span></span><br><span class="line">        &#123;send <span class="string">"yes\n"</span>;exp_continue&#125;</span><br><span class="line">        <span class="string">"password:"</span></span><br><span class="line">        &#123;send <span class="string">"<span class="variable">$passwd</span>\n"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure></li><li><p>赋予可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod +x item2ssh.sh</span><br></pre></td></tr></table></figure></li></ol><h1 id="二、创建alias"><a href="#二、创建alias" class="headerlink" title="二、创建alias"></a>二、创建alias</h1><ol start="3"><li><p>创建alias<br>在~目录下，创建.bash_alies文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ssh2std=<span class="string">'item2login.sh 22 username ip passwd'</span></span><br></pre></td></tr></table></figure></li><li><p>修改.bash_profile<br>添加以下几行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bash_aliases ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">source</span> ~/.bash_aliases</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><p>5.source使之生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>这样以后，直接敲ssd2std 就可以免密码ssh登录到std机器上了。</p><h1 id="三、item2中使用"><a href="#三、item2中使用" class="headerlink" title="三、item2中使用"></a>三、item2中使用</h1><p>在item2软件中，<code>comand</code>+<code>,</code> 弹出Preferences，<br>然后可以添加Profiles,如下图所示<br><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/item2.jpg" alt="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/item2.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、创建expect脚本&quot;&gt;&lt;a href=&quot;#一、创建expect脚本&quot; class=&quot;headerlink&quot; title=&quot;一、创建expect脚本&quot;&gt;&lt;/a&gt;一、创建expect脚本&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在/usr/local/bin目录下创建i
      
    
    </summary>
    
      <category term="Mac" scheme="http:zhuhaijun.cn/categories/Mac/"/>
    
    
      <category term="mac" scheme="http:zhuhaijun.cn/tags/mac/"/>
    
      <category term="ssh" scheme="http:zhuhaijun.cn/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>MAC使用nginx分发80至8080端口</title>
    <link href="http:zhuhaijun.cn/2018/12/21/MAC%E4%BD%BF%E7%94%A8nginx%E5%88%86%E5%8F%9180%E8%87%B38080%E7%AB%AF%E5%8F%A3/"/>
    <id>http:zhuhaijun.cn/2018/12/21/MAC使用nginx分发80至8080端口/</id>
    <published>2018-12-21T11:13:03.000Z</published>
    <updated>2018-12-21T11:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、使用背景"><a href="#1、使用背景" class="headerlink" title="1、使用背景"></a>1、使用背景</h1><p>由于项目必须要启动80端口，但是mac系统中非root用户无法直接使用1024以下的端口</p><h1 id="2、释放apache的80端口"><a href="#2、释放apache的80端口" class="headerlink" title="2、释放apache的80端口"></a>2、释放apache的80端口</h1><p>由于Mac OS是自带Apache服务的，它本身占用了80端口，首先你需要将Apache的监听端口改为其他端口或者将其直接卸载，我选用的是将其端口改为8011<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apache2/httpd.conf</span><br></pre></td></tr></table></figure></p><p>Listen 8011</p><p>改动后，重启生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/apachectl restart</span><br></pre></td></tr></table></figure></p><p>到这里，你已经释放了80端口</p><h1 id="3、使用Nginx分发80端口到8080端口"><a href="#3、使用Nginx分发80端口到8080端口" class="headerlink" title="3、使用Nginx分发80端口到8080端口"></a>3、使用Nginx分发80端口到8080端口</h1><ol start="0"><li>安装brew</li></ol><p>见官网：<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">https://brew.sh/index_zh-cn.html</a></p><ol><li><p>使用Homebrew安装库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew search nginx</span><br><span class="line">brew install nginx</span><br></pre></td></tr></table></figure></li><li><p>安装好了后，修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost l.sogou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location ~* ^/h5/&#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8091;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* ^/weixin/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8093;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* ^/api/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8087;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page             /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server下的结点：<br>listen：监听80端口<br>server_name：转发到哪个地址<br>proxy_pass：代理到哪个地址</p><ol start="3"><li>Nginx开机启动</li></ol><p>你需要了解的就是plist文件。plist就是property list format的意思，是苹果用来保存应用数据的格式，其实就是个xml。<br>可以在/usr/local/opt/nginx 下找到nginx对应的plist文件，比如在作者电脑上是 homebrew.mxcl.nginx.plist 。</p><p>需要把这个文件复制到 /Library/LaunchDaemons 下，系统启动时启动。<br>也可以复制到 /Library/LaunchAgents下，在用户登录时启动。<br>接着执行launchctl load -w，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/<span class="built_in">local</span>/opt/nginx/*.plist /Library/LaunchDaemons</span><br><span class="line"></span><br><span class="line">sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure><p>最后，重启你的机器，你会发现nginx在80端口启动了，试着通过<a href="http://localhost直接访问" target="_blank" rel="noopener">http://localhost直接访问</a></p><ol start="4"><li>修改配置 重启生效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/opt/nginx/bin/</span><br><span class="line">sudo ./nginx -s reload</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、使用背景&quot;&gt;&lt;a href=&quot;#1、使用背景&quot; class=&quot;headerlink&quot; title=&quot;1、使用背景&quot;&gt;&lt;/a&gt;1、使用背景&lt;/h1&gt;&lt;p&gt;由于项目必须要启动80端口，但是mac系统中非root用户无法直接使用1024以下的端口&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
      <category term="Mac" scheme="http:zhuhaijun.cn/categories/Mac/"/>
    
    
      <category term="mac" scheme="http:zhuhaijun.cn/tags/mac/"/>
    
      <category term="nginx" scheme="http:zhuhaijun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http:zhuhaijun.cn/2018/12/19/hello-world/"/>
    <id>http:zhuhaijun.cn/2018/12/19/hello-world/</id>
    <published>2018-12-19T05:17:36.000Z</published>
    <updated>2018-12-19T05:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java字节码分析工具classpy</title>
    <link href="http:zhuhaijun.cn/2018/12/05/classpy/"/>
    <id>http:zhuhaijun.cn/2018/12/05/classpy/</id>
    <published>2018-12-05T09:10:04.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节码分析工具classpy"><a href="#字节码分析工具classpy" class="headerlink" title="字节码分析工具classpy"></a>字节码分析工具classpy</h1><p>这个开源工具的地址: <a href="https://github.com/zxh0/classpy" target="_blank" rel="noopener">https://github.com/zxh0/classpy</a></p><ol><li>classpy环境依赖下载地址上有说明，首先保证你的环境里配置了gradle</li><li>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:zxh0/classpy.git 下载工具</li><li>进入到classpy目录下执行命令<br>3.1. 编译：gradle uberjar<br>4.2. 启动：gradle run</li></ol><p>经过以上两步就可以打开classpy界面，再打开一个class文件，如下所示</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/classpy.png" alt="classpy" title="classpy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字节码分析工具classpy&quot;&gt;&lt;a href=&quot;#字节码分析工具classpy&quot; class=&quot;headerlink&quot; title=&quot;字节码分析工具classpy&quot;&gt;&lt;/a&gt;字节码分析工具classpy&lt;/h1&gt;&lt;p&gt;这个开源工具的地址: &lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="jvm" scheme="http:zhuhaijun.cn/tags/jvm/"/>
    
      <category term="classpy" scheme="http:zhuhaijun.cn/tags/classpy/"/>
    
  </entry>
  
  <entry>
    <title>install go</title>
    <link href="http:zhuhaijun.cn/2018/11/06/install-go/"/>
    <id>http:zhuhaijun.cn/2018/11/06/install-go/</id>
    <published>2018-11-06T11:56:00.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h1><ol><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压到/usr/local目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -C /usr/<span class="built_in">local</span> -zxf go1.11.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>加入环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure></li></ol><h1 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h1><p>1、下载<a href="https://studygolang.com/dl" target="_blank" rel="noopener">https://studygolang.com/dl</a><br>2、双击安装<br>3、默认情况下.msi文件会安装在 c:\Go 目录下。你可以将 c:\Go\bin 目录添加到 PATH 环境变量中。添加后你需要重启命令窗口才能生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-下安装&quot;&gt;&lt;a href=&quot;#Linux-下安装&quot; class=&quot;headerlink&quot; title=&quot;Linux 下安装&quot;&gt;&lt;/a&gt;Linux 下安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载&lt;/p&gt;
&lt;figure class=&quot;highlight b
      
    
    </summary>
    
      <category term="go" scheme="http:zhuhaijun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http:zhuhaijun.cn/tags/go/"/>
    
      <category term="install" scheme="http:zhuhaijun.cn/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>windows cmdpython交互模式下cp65001异常</title>
    <link href="http:zhuhaijun.cn/2018/11/01/windows%20cmd%20python%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F%E4%B8%8Bcp65001%E5%BC%82%E5%B8%B8/"/>
    <id>http:zhuhaijun.cn/2018/11/01/windows cmd python交互模式下cp65001异常/</id>
    <published>2018-11-01T08:11:39.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>python安装后进入命令行交互模式，输入任何代码都报 <code>unknown encoding: cp65001</code>异常</p><p>需要将编码(UTF-8)修改为 简体中文(GBK)</p><p>在CMD窗口执行　<code>chcp 936</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python安装后进入命令行交互模式，输入任何代码都报 &lt;code&gt;unknown encoding: cp65001&lt;/code&gt;异常&lt;/p&gt;
&lt;p&gt;需要将编码(UTF-8)修改为 简体中文(GBK)&lt;/p&gt;
&lt;p&gt;在CMD窗口执行　&lt;code&gt;chcp 936&lt;/cod
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 快捷键与 Eclipse 对比</title>
    <link href="http:zhuhaijun.cn/2018/11/01/IntelliJ-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http:zhuhaijun.cn/2018/11/01/IntelliJ-IDEA-快捷键/</id>
    <published>2018-11-01T06:14:06.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>IntelliJ IDEA快捷键:</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/idea%20keymap.png" alt="IntelliJ IDEA快捷键" title="IntelliJ IDEA快捷键"></p><p>Eclipse vs IDEA快捷键:</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/eclipse%20vs%20%20idea.png" alt="Eclipse vs IDEA快捷键" title="Eclipse vs IDEA快捷键"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IntelliJ IDEA快捷键:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/idea%20keymap.png&quot; alt=&quot;Int
      
    
    </summary>
    
      <category term="tool" scheme="http:zhuhaijun.cn/categories/tool/"/>
    
    
      <category term="idea" scheme="http:zhuhaijun.cn/tags/idea/"/>
    
      <category term="tool" scheme="http:zhuhaijun.cn/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>用python写的一个简易的Http服务器</title>
    <link href="http:zhuhaijun.cn/2018/11/01/httpServer-by-python/"/>
    <id>http:zhuhaijun.cn/2018/11/01/httpServer-by-python/</id>
    <published>2018-11-01T03:37:30.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在看《Http权威指南》的时候，看到里面用Perl实现了一个最简单的Http的服务器。<br>于是我参考着里面的逻辑写了一个python版本的。</p><ol><li>创建服务器套接字（socket），把地址绑定到套接字上，并监听连接</li><li>服务器无限循环，接受客户端连接</li><li>客户端连接进来后，读取客户端发送的消息，并且打印Http请求报文</li><li>返回Http的响应报文</li></ol><p>运行以下的python脚本后，使用浏览器访问<a href="http://localhost:8080/即可。" target="_blank" rel="noopener">http://localhost:8080/即可。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">8080</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST,PORT)</span><br><span class="line"></span><br><span class="line">tcpSerSock = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcpSerSock.bind(ADDR)</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">responseStr = <span class="string">'''</span></span><br><span class="line"><span class="string">HTTP/1.0 200 OK</span></span><br><span class="line"><span class="string">Connection:close</span></span><br><span class="line"><span class="string">Content-type;text:plain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Hi there!</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'waiting for connection ...'</span></span><br><span class="line">    tcpCliSock , addr = tcpSerSock.accept()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'...connected from:'</span>,addr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = tcpCliSock.recv(BUFSIZE)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line">        tcpCliSock.send(responseStr)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tcpCliSock.close()</span><br><span class="line"></span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在看《Http权威指南》的时候，看到里面用Perl实现了一个最简单的Http的服务器。&lt;br&gt;于是我参考着里面的逻辑写了一个python版本的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建服务器套接字（socket），把地址绑定到套接字上，并监听连接&lt;/li&gt;
&lt;li&gt;服务器无限循
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="http" scheme="http:zhuhaijun.cn/tags/http/"/>
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>万圣节</title>
    <link href="http:zhuhaijun.cn/2018/11/01/%E4%B8%87%E5%9C%A3%E8%8A%82/"/>
    <id>http:zhuhaijun.cn/2018/11/01/万圣节/</id>
    <published>2018-10-31T16:00:07.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="万圣节"><a href="#万圣节" class="headerlink" title="万圣节"></a>万圣节</h1><p>今天是万圣节，11月1日，又是新的一个月的来临。</p><p>最近的一段时间过得很开心。</p><p>以后还是得继续更新日志才好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;万圣节&quot;&gt;&lt;a href=&quot;#万圣节&quot; class=&quot;headerlink&quot; title=&quot;万圣节&quot;&gt;&lt;/a&gt;万圣节&lt;/h1&gt;&lt;p&gt;今天是万圣节，11月1日，又是新的一个月的来临。&lt;/p&gt;
&lt;p&gt;最近的一段时间过得很开心。&lt;/p&gt;
&lt;p&gt;以后还是得继续更新日志才好
      
    
    </summary>
    
      <category term="随笔" scheme="http:zhuhaijun.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http:zhuhaijun.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式使用的特殊符号和字符</title>
    <link href="http:zhuhaijun.cn/2018/10/30/RE-Metacharacter/"/>
    <id>http:zhuhaijun.cn/2018/10/30/RE-Metacharacter/</id>
    <published>2018-10-30T03:53:21.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式中最常见的符号和字符"><a href="#正则表达式中最常见的符号和字符" class="headerlink" title="正则表达式中最常见的符号和字符"></a>正则表达式中最常见的符号和字符</h1><table><thead><tr><th>记号</th><th>说明</th><th>正则表达式样例</th></tr></thead><tbody><tr><td><em>literal</em></td><td>匹配字符串的值</td><td>foo</td></tr><tr><td><em>re1&#124;rel2</em></td><td>匹配正则表达式re1或re2</td><td>foo&#124;bar</td></tr><tr><td>.</td><td>匹配任何字符（换行符除外）</td><td>b.b</td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^Dear</td></tr><tr><td>$</td><td>匹配字符串的结尾</td><td>/bin/*sh$</td></tr><tr><td>*</td><td>匹配前面出现的正则表达式零次或多次</td><td>[A-Za-z0-9]*</td></tr><tr><td>+</td><td>匹配前面出现的正则表达式一次或多次</td><td>[a-z]+\.com</td></tr><tr><td>?</td><td>匹配前面出现的正则表达式零次或一次</td><td>goo?</td></tr><tr><td>{N}</td><td>匹配前面出现的正则表达式N次</td><td>[0-9]{3}</td></tr><tr><td>{M,N}</td><td>匹配重复出现M次到N次的正则表达式</td><td>[0-9]{5,9}</td></tr><tr><td>[…]</td><td>匹配字符组里出现的任意一个字符</td><td>[aeiou]</td></tr><tr><td>[..x-y..]</td><td>匹配从字符x到y中任意一个字符</td><td>[0-9],[A-Za-z]</td></tr><tr><td>[^…]</td><td>不匹配此字符组中出现的任何一个字符，包括某一范围的字符（如果在此字符集中出现）</td><td>[^aeiou],[^A-Za-z]</td></tr><tr><td>(*&#124;+&#124;?&#124;{})?</td><td>用于上面出现的任何“非贪婪”，版本重复匹配次数符号</td><td>.*?[a-z]</td></tr><tr><td>(…)</td><td>匹配封闭括号中正则表达式（RE），并保存为子组</td><td>（[0-9]{3}）?,f(oo&#124;u)bar</td></tr><tr><td>\d</td><td>匹配任何数字，和[0-9]一样，（\D是\d的反义：任何非数字）</td><td>data\d+.txt</td></tr><tr><td>\w</td><td>匹配任何数字和字符，即<a href="\W是\w的反义">A-Za-z0-9</a></td><td>[A-Za-z_]\w+</td></tr><tr><td>\s</td><td>匹配任何空白符，和[\n\t\r\v\f]相同，（\S是\s的反义）</td><td>of\sthe</td></tr><tr><td>\b</td><td>匹配单词边界（\B是\b的反义）</td><td>\bThe\b</td></tr><tr><td>\nn</td><td>匹配已保存的子组(参考上面的正则表达式符合:（…））)</td><td>price:\16</td></tr><tr><td>\c</td><td>逐一匹配特殊字符c（即取消它的特殊含义，按字面匹配）</td><td>.,\,*</td></tr><tr><td>\A(\Z)</td><td>匹配字符换的起始（结束）</td><td>\ADear</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式中最常见的符号和字符&quot;&gt;&lt;a href=&quot;#正则表达式中最常见的符号和字符&quot; class=&quot;headerlink&quot; title=&quot;正则表达式中最常见的符号和字符&quot;&gt;&lt;/a&gt;正则表达式中最常见的符号和字符&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;

      
    
    </summary>
    
      <category term="re" scheme="http:zhuhaijun.cn/categories/re/"/>
    
    
      <category term="re" scheme="http:zhuhaijun.cn/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Spring中的BeanPostProcessor简介</title>
    <link href="http:zhuhaijun.cn/2018/08/06/Spring%E4%B8%AD%E7%9A%84BeanPostProcessor/"/>
    <id>http:zhuhaijun.cn/2018/08/06/Spring中的BeanPostProcessor/</id>
    <published>2018-08-06T12:26:50.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeanPostProcessor简介"><a href="#BeanPostProcessor简介" class="headerlink" title="BeanPostProcessor简介"></a>BeanPostProcessor简介</h1><p>BeanPostProcessor是Spring IOC容器给我们提供的一个扩展接口。接口声明如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//bean初始化方法调用前被调用</span></span><br><span class="line">    <span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">//bean初始化方法调用后被调用</span></span><br><span class="line">    <span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BeanPostProcessor接口有2个回调方法，当一个BeanPostProcessor的实现类注册到Spring IOC容器后，对于该Spring IOC 容器所创造的每一个bean实例的初始化方法（如afterPropertiesSet和自定义init-method方法）调用前，将会调用BeanPostProcessor中的postProcessBeforeInitialization方法；而在bean实例初始化方法调用完成后，则会调用BeanPostProcessor中的postProcessAfterInitialization方法。</p><p>整个调用过程简单示意如下：</p><blockquote><p>Spring IOC容器实例化Bean</p></blockquote><blockquote><p>调用BeanPostProcessor的postProcessBeforeInitialization方法</p></blockquote><blockquote><p>调用bean实例的初始化方法</p></blockquote><blockquote><p>调用BeanPostProcessor的postProcessAfterInitialization方法</p></blockquote><p>可以看到，Spring容器通过BeanPostProcessor给了我们一个机会对Spring管理的bean进行再加工。比如：我们可以修改bean的属性，可以给bean生成一个动态代理实例等等。</p><p>一些Spring AOP的底层处理也是通过实现BeanPostProcessor来执行代理包装逻辑的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BeanPostProcessor简介&quot;&gt;&lt;a href=&quot;#BeanPostProcessor简介&quot; class=&quot;headerlink&quot; title=&quot;BeanPostProcessor简介&quot;&gt;&lt;/a&gt;BeanPostProcessor简介&lt;/h1&gt;&lt;p&gt;Be
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http:zhuhaijun.cn/tags/spring/"/>
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring环境搭建</title>
    <link href="http:zhuhaijun.cn/2018/08/01/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http:zhuhaijun.cn/2018/08/01/Spring环境搭建/</id>
    <published>2018-08-01T03:08:39.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring的源码在Github上，基于Gradle的构建来构建项目。所以要构建Spring源码首先要安装Github以及Gradle。<br>github的安装不再赘述。</p><h1 id="安装gradle"><a href="#安装gradle" class="headerlink" title="安装gradle"></a>安装gradle</h1><p>Gradle是一个基于Groovy的构建工具，它使用Groovy来编写构建脚本，支持依赖管理和多项目构建，类似于maven。</p><p>下载地址为：<a href="http://gradle.org/downloads" target="_blank" rel="noopener">http://gradle.org/downloads</a></p><p>下载后解压到指定目录，我放在了<code>C:\Program Files\gradle-1.6</code></p><p>然后配置环境变量</p><ol><li>根据对应目录创建GRADLE_HOME系统变量</li><li>将系统变量加入到path中</li><li>测试，打开命令窗口输入<code>gradle -version</code>,如果安装成功会出现Gradle对应的版本信息。</li></ol><h1 id="下载Spring"><a href="#下载Spring" class="headerlink" title="下载Spring"></a>下载Spring</h1><p>例如要将下载的源码存储到g:\spring下，进入这个目录，输入一下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:spring-projects/spring-framework.git</span><br><span class="line"><span class="built_in">cd</span> spring-framework</span><br></pre></td></tr></table></figure></p><p>等待一段时间后，完成下载。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:spring-projects/spring-framework.git</span><br><span class="line">Cloning into <span class="string">'spring-framework'</span>...</span><br><span class="line">remote: Counting objects: 438994, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (66/66), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 438994 (delta 6), reused 39 (delta 0), pack-reused 438914</span><br><span class="line">Receiving objects: 100% (438994/438994), 111.82 MiB | 2.83 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (211139/211139), <span class="keyword">done</span>.</span><br><span class="line">Checking out files: 100% (8092/8092), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure></p><p>进入这个目录，会看到已经存在了相应的源码信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Spring-framework/</span><br><span class="line">$ ll</span><br><span class="line">total 53</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089 11072 8月   1 12:06 build.gradle</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 buildSrc/</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  2395 8月   1 12:06 CODE_OF_CONDUCT.adoc</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  6401 8月   1 12:06 CONTRIBUTING.md</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 gradle/</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089    30 8月   1 12:06 gradle.properties</span><br><span class="line">-rwxr-xr-x 1 zhuhaijun 1049089  5533 8月   1 12:06 gradlew*</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  2348 8月   1 12:06 gradlew.bat</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  2486 8月   1 12:06 import-into-eclipse.md</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  1868 8月   1 12:06 import-into-idea.md</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  2290 8月   1 12:06 README.md</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089   831 8月   1 12:06 settings.gradle</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-aop/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-aspects/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-beans/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-context/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-context-indexer/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-context-support/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-core/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-expression/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-framework-bom/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-instrument/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-jcl/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-jdbc/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-jms/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-messaging/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-orm/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-oxm/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-test/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-tx/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-web/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-webflux/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-webmvc/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-websocket/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 src/</span><br></pre></td></tr></table></figure></p><h1 id="构建spring"><a href="#构建spring" class="headerlink" title="构建spring"></a>构建spring</h1><p>当前的源码并不可以直接导入到Eclipse中，我们还需要将源码转换为Eclipse可以读取的形式。</p><p>在每个目录下，一个个地执行 gradle cleanidea eclipse<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ gradle cleanidea eclipse</span><br><span class="line">Starting a Gradle Daemon, 1 incompatible Daemon could not be reused, use --statu                                                                                                                                                                                               s <span class="keyword">for</span> details</span><br><span class="line">Generating JAR file <span class="string">'gradle-api-4.9.jar'</span></span><br><span class="line">&gt; Task :buildSrc:compileJava NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:compileGroovy</span><br><span class="line">&gt; Task :buildSrc:processResources</span><br><span class="line">&gt; Task :buildSrc:classes</span><br><span class="line">&gt; Task :buildSrc:jar</span><br><span class="line">&gt; Task :buildSrc:assemble</span><br><span class="line">&gt; Task :buildSrc:compileTestJava NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:compileTestGroovy NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:testClasses UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:<span class="built_in">test</span> NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:check UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:build</span><br><span class="line">&gt; Task :spring-tx:cleanIdeaModule UP-TO-DATE</span><br><span class="line">&gt; Task :spring-tx:cleanIdea UP-TO-DATE</span><br><span class="line">&gt; Task :spring-tx:eclipseClasspath</span><br><span class="line">&gt; Task :spring-tx:eclipseJdtPrepare</span><br><span class="line">&gt; Task :spring-tx:eclipseJdt</span><br><span class="line">&gt; Task :spring-tx:eclipseProject</span><br><span class="line">&gt; Task :spring-tx:eclipseSettings</span><br><span class="line">&gt; Task :spring-tx:eclipseWstComponent</span><br><span class="line">&gt; Task :spring-tx:eclipse</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 36s</span><br><span class="line">8 actionable tasks: 6 executed, 2 up-to-date</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring的源码在Github上，基于Gradle的构建来构建项目。所以要构建Spring源码首先要安装Github以及Gradle。&lt;br&gt;github的安装不再赘述。&lt;/p&gt;
&lt;h1 id=&quot;安装gradle&quot;&gt;&lt;a href=&quot;#安装gradle&quot; class=&quot;h
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http:zhuhaijun.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>使用pushy进行APNs消息推送</title>
    <link href="http:zhuhaijun.cn/2018/07/25/%E4%BD%BF%E7%94%A8pushy%E8%BF%9B%E8%A1%8CAPNs%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
    <id>http:zhuhaijun.cn/2018/07/25/使用pushy进行APNs消息推送/</id>
    <published>2018-07-25T08:33:26.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前做了一个iOS消息推送的平台，主要是通过调用苹果提供的APNs接口进行消息的推送。最后采用了Pushy框架来进行推送。</p><h1 id="pushy简介"><a href="#pushy简介" class="headerlink" title="pushy简介"></a>pushy简介</h1><p>Pushy是用于发送APN（iOS、MacOS和Safari）推送通知的Java库，由Turo工程师编写和维护。</p><p>可以在github上获取源码和介绍：<a href="https://github.com/relayrides/pushy" target="_blank" rel="noopener">https://github.com/relayrides/pushy</a></p><p>官方文档：<a href="https://github.com/relayrides/pushy/wiki" target="_blank" rel="noopener">https://github.com/relayrides/pushy/wiki</a></p><h1 id="使用pushy"><a href="#使用pushy" class="headerlink" title="使用pushy"></a>使用pushy</h1><h2 id="首先引入jar"><a href="#首先引入jar" class="headerlink" title="首先引入jar"></a>首先引入jar</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.turo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pushy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.turo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pushy-dropwizard-metrics-listener<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.dropwizard.metrics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>metrics-servlets<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>下面这段代码主要用户建立服务器与苹果服务器之间的链接，当我们每次执行推送消息的时候，会去检查这个链接是不是还存在，如果存在就直接使用，否则执行下面的代码建立链接。与苹果的服务器的链接长时间没有数据发送过去的话，苹果服务器会主动将它断掉。</p><p>同时也可以通过setApnsServer函数来指定是开发环境还是生产环境。</p><p>是基于Netty的，通过ApnsClientBuilder我们可以根据需要来修改ApnsClient的连接数和EventLoopGroups的线程数<br><br>setConcurrentConnections：设置服务器与苹果服务器建立几个链接通道，这里是建立4个，非越多越好<br><br>setEventLoopGroup：建立几个线程来处理，这里设置了4个。相当于16个线程同时处理<br><br>关于连接数和EventLoopGroup线程数官不要配置EventLoopGroups的线程数超过APNs连接数。</p><p>setMetricsListener：可以设置监听器，来监听发送消息的结果<br>setClientCredentials：证书和密码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (apnsClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">4</span>);</span><br><span class="line">        String apnsServer = mode.equals(<span class="string">"sandbox"</span>)?ApnsClientBuilder.DEVELOPMENT_APNS_HOST:ApnsClientBuilder.PRODUCTION_APNS_HOST;</span><br><span class="line">        apnsClient = <span class="keyword">new</span> ApnsClientBuilder().setApnsServer(apnsServer)</span><br><span class="line">        .setClientCredentials( <span class="keyword">new</span> FileInputStream(p12_path), password )</span><br><span class="line">                .setConcurrentConnections(<span class="number">4</span>)</span><br><span class="line">                .setEventLoopGroup(eventLoopGroup)</span><br><span class="line">                .setMetricsListener( metricsListener )</span><br><span class="line">                .build();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.err.println(_.f(<span class="string">"[%s][ERROR]ios get pushy apns client failed!"</span>,format.print(System.currentTimeMillis())));</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送推送"><a href="#发送推送" class="headerlink" title="发送推送"></a>发送推送</h2><p>关于消息的推送，注意一定要使用异步操作，Pushy发送消息会返回一个Netty Future对象，通过它可以拿到消息发送的情况。</p><p>APNs服务器可以保证同时发送1500条消息，当超过这个限制时，Pushy会缓存消息，所以我们不必担心异步操作发送的消息过多（当我们的消息非常多，达到上亿时，我们也得做一些控制，避免缓存过大，内存不足，Pushy给出了使用Semaphore的解决方法）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Future&lt;PushNotificationResponse&lt;SimpleApnsPushNotification&gt;&gt; future = apnsClient.sendNotification(pushNotification);</span><br><span class="line">          future.addListener(<span class="keyword">new</span> PushNotificationResponseListener&lt;SimpleApnsPushNotification&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(<span class="keyword">final</span> PushNotificationFuture&lt;SimpleApnsPushNotification, PushNotificationResponse&lt;SimpleApnsPushNotification&gt;&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                  <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                      <span class="keyword">final</span> PushNotificationResponse&lt;SimpleApnsPushNotification&gt; pushNotificationResponse = future.getNow();</span><br><span class="line">                      <span class="keyword">if</span> (pushNotificationResponse.isAccepted()) &#123;</span><br><span class="line">                              successCnt.incrementAndGet();</span><br><span class="line">                          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              Date invalidTime = pushNotificationResponse.getTokenInvalidationTimestamp();</span><br><span class="line">                              <span class="keyword">if</span> (invalidTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                  System.out.println(_.f(<span class="string">"[%s][ERROR]Notification deviceToken="</span>+token+<span class="string">" rejected by the APNs gateway:"</span> + pushNotificationResponse.getRejectionReason()+<span class="string">"\t...and the token is invalid as of "</span> + pushNotificationResponse.getTokenInvalidationTimestamp(),format.print(System.currentTimeMillis())));</span><br><span class="line">                              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                              System.out.println(_.f(<span class="string">"[%s][ERROR]Notification deviceToken="</span>+token+<span class="string">" rejected by the APNs gateway:"</span> + pushNotificationResponse.getRejectionReason(),format.print(System.currentTimeMillis())));</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                          System.out.println(_.f(<span class="string">"[%s][ERROR]send notification device token="</span>+token+<span class="string">" is failed:"</span> + future.cause().getMessage(),format.print(System.currentTimeMillis())));</span><br><span class="line">                      &#125;</span><br><span class="line">                      latch.countDown();</span><br><span class="line">                      semaphore.release();</span><br><span class="line">                 &#125;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.ApnsClient;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.ApnsClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.PushNotificationResponse;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.metrics.dropwizard.DropwizardApnsClientMetricsListener;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.ApnsPayloadBuilder;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.SimpleApnsPushNotification;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.TokenUtil;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.concurrent.PushNotificationFuture;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.concurrent.PushNotificationResponseListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOSPushClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApnsClient apnsClient = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//APNs服务器可以保证同时发送1500条消息，当超过这个限制时，Pushy会缓存消息，所以我们不必担心异步操作发送的消息过多</span></span><br><span class="line">    <span class="comment">//通过Semaphore来进行流控，防止缓存过大，内存不足</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">6000</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span> DropwizardApnsClientMetricsListener metricsListener = <span class="keyword">new</span> DropwizardApnsClientMetricsListener();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter format = DateTimeFormat.forPattern(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String mode,String p12_path ,String password, <span class="keyword">final</span> List&lt;String&gt; deviceTokens, String alertTitle , String alertBody,<span class="keyword">int</span> badgeNumber,Map&lt;String,String&gt; extraMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (apnsClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                EventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">4</span>);</span><br><span class="line">                String apnsServer = mode.equals(<span class="string">"sandbox"</span>)?ApnsClientBuilder.DEVELOPMENT_APNS_HOST:ApnsClientBuilder.PRODUCTION_APNS_HOST;</span><br><span class="line">                apnsClient = <span class="keyword">new</span> ApnsClientBuilder().setApnsServer(apnsServer)</span><br><span class="line">                .setClientCredentials( <span class="keyword">new</span> FileInputStream(p12_path), password )</span><br><span class="line">                        .setConcurrentConnections(<span class="number">4</span>)</span><br><span class="line">                        .setEventLoopGroup(eventLoopGroup)</span><br><span class="line">                        .setMetricsListener( metricsListener )</span><br><span class="line">                        .build();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.err.println(_.f(<span class="string">"[%s][ERROR]ios get pushy apns client failed!"</span>,format.print(System.currentTimeMillis())));</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> total = deviceTokens.size();</span><br><span class="line">        <span class="comment">//通过CountDownLatch来标记消息是否发送完成</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(deviceTokens.size());</span><br><span class="line">        <span class="keyword">final</span> AtomicLong successCnt = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">long</span> startPushTime =  System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String deviceToken : deviceTokens) &#123;</span><br><span class="line"></span><br><span class="line">        ApnsPayloadBuilder payloadBuilder = <span class="keyword">new</span> ApnsPayloadBuilder();</span><br><span class="line">            payloadBuilder.setAlertBody(alertBody);</span><br><span class="line">            payloadBuilder.setAlertTitle(alertTitle);</span><br><span class="line">            payloadBuilder.setBadgeNumber(badgeNumber);</span><br><span class="line">            payloadBuilder.setSoundFileName(<span class="string">"default"</span>);</span><br><span class="line">            <span class="comment">//自定义键值对，其中value是Object，可以支持多层的json字串，这个根据业务需求而定</span></span><br><span class="line">            <span class="keyword">if</span>(extraMap != <span class="keyword">null</span> &amp;&amp; extraMap.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">for</span>(String key : extraMap.keySet())&#123;</span><br><span class="line">        String value = extraMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"extraData"</span>.equals(key))&#123;</span><br><span class="line">        payloadBuilder.addCustomProperty(key,JSONObject.parse(value));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        payloadBuilder.addCustomProperty(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            String payload = payloadBuilder.buildWithDefaultMaximumLength(); <span class="comment">//最大4k</span></span><br><span class="line">            <span class="keyword">final</span> String token = TokenUtil.sanitizeTokenString(deviceToken);</span><br><span class="line">            SimpleApnsPushNotification pushNotification = <span class="keyword">new</span> SimpleApnsPushNotification(token, <span class="string">"com.sogou.sogoureader"</span> , payload);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                System.out.println(_.f(<span class="string">"[%s][ERROR]ios push get semaphore failed, deviceToken:"</span>+deviceToken,format.print(System.currentTimeMillis())));</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Future&lt;PushNotificationResponse&lt;SimpleApnsPushNotification&gt;&gt; future = apnsClient.sendNotification(pushNotification);</span><br><span class="line">            future.addListener(<span class="keyword">new</span> PushNotificationResponseListener&lt;SimpleApnsPushNotification&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(<span class="keyword">final</span> PushNotificationFuture&lt;SimpleApnsPushNotification, PushNotificationResponse&lt;SimpleApnsPushNotification&gt;&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                        <span class="keyword">final</span> PushNotificationResponse&lt;SimpleApnsPushNotification&gt; pushNotificationResponse = future.getNow();</span><br><span class="line">                        <span class="keyword">if</span> (pushNotificationResponse.isAccepted()) &#123;</span><br><span class="line">                                successCnt.incrementAndGet();</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                Date invalidTime = pushNotificationResponse.getTokenInvalidationTimestamp();</span><br><span class="line">                                <span class="keyword">if</span> (invalidTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    System.out.println(<span class="string">"[ERROR]Notification deviceToken="</span>+token+<span class="string">" rejected by the APNs gateway."</span>);</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                System.out.println(<span class="string">"Notification deviceToken="</span>+token+<span class="string">" rejected by the APNs gateway"</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">"[ERROR]send notification device token="</span>+token+<span class="string">" is failed:"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        latch.countDown();</span><br><span class="line">                        semaphore.release();</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await(<span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[ERROR]ios push latch await failed!"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endPushTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"IOSPushClient pushMessage success. [total push="</span> + total + <span class="string">"][succ push="</span> + (successCnt.get()) + <span class="string">"], totalcost= "</span> + (endPushTime - startTime) + <span class="string">", pushCost="</span> + (endPushTime - startPushTime) , format.print(System.currentTimeMillis())));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前做了一个iOS消息推送的平台，主要是通过调用苹果提供的APNs接口进行消息的推送。最后采用了Pushy框架来进行推送。&lt;/p&gt;
&lt;h1 id=&quot;pushy简介&quot;&gt;&lt;a href=&quot;#pushy简介&quot; class=&quot;headerlink&quot; title=&quot;pushy简介&quot;&gt;&lt;/a&gt;pushy简介&lt;/h1&gt;&lt;p&gt;Pushy是用于发送APN（iOS、MacOS和Safari）推送通知的Java库，由Turo工程师编写和维护。&lt;/p&gt;
&lt;p&gt;可以在github上获取源码和介绍：&lt;a href=&quot;https://github.com/relayrides/pushy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/relayrides/pushy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://github.com/relayrides/pushy/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/relayrides/pushy/wiki&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用pushy&quot;&gt;&lt;a href=&quot;#使用pushy&quot; class=&quot;headerlink&quot; title=&quot;使用pushy&quot;&gt;&lt;/a&gt;使用pushy&lt;/h1&gt;&lt;h2 id=&quot;首先引入jar&quot;&gt;&lt;a href=&quot;#首先引入jar&quot; class=&quot;headerlink&quot; title=&quot;首先引入jar&quot;&gt;&lt;/a&gt;首先引入jar&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.turo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;pushy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.12.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.turo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;pushy-dropwizard-metrics-listener&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.12.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.dropwizard.metrics&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;metrics-servlets&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;建立连接&quot;&gt;&lt;a href=&quot;#建立连接&quot; class=&quot;headerlink&quot; title=&quot;建立连接&quot;&gt;&lt;/a&gt;建立连接&lt;/h2&gt;&lt;p&gt;下面这段代码主要用户建立服务器与苹果服务器之间的链接，当我们每次执行推送消息的时候，会去检查这个链接是不是还存在，如果存在就直接使用，否则执行下面的代码建立链接。与苹果的服务器的链接长时间没有数据发送过去的话，苹果服务器会主动将它断掉。&lt;/p&gt;
&lt;p&gt;同时也可以通过setApnsServer函数来指定是开发环境还是生产环境。&lt;/p&gt;
&lt;p&gt;是基于Netty的，通过ApnsClientBuilder我们可以根据需要来修改ApnsClient的连接数和EventLoopGroups的线程数&lt;br&gt;&lt;br&gt;setConcurrentConnections：设置服务器与苹果服务器建立几个链接通道，这里是建立4个，非越多越好&lt;br&gt;&lt;br&gt;setEventLoopGroup：建立几个线程来处理，这里设置了4个。相当于16个线程同时处理&lt;br&gt;&lt;br&gt;关于连接数和EventLoopGroup线程数官不要配置EventLoopGroups的线程数超过APNs连接数。&lt;/p&gt;
&lt;p&gt;setMetricsListener：可以设置监听器，来监听发送消息的结果&lt;br&gt;setClientCredentials：证书和密码。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (apnsClient == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EventLoopGroup eventLoopGroup = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NioEventLoopGroup(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String apnsServer = mode.equals(&lt;span class=&quot;string&quot;&gt;&quot;sandbox&quot;&lt;/span&gt;)?ApnsClientBuilder.DEVELOPMENT_APNS_HOST:ApnsClientBuilder.PRODUCTION_APNS_HOST;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        apnsClient = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ApnsClientBuilder().setApnsServer(apnsServer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		.setClientCredentials( &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(p12_path), password )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .setConcurrentConnections(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .setEventLoopGroup(eventLoopGroup)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .setMetricsListener( metricsListener )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.err.println(_.f(&lt;span class=&quot;string&quot;&gt;&quot;[%s][ERROR]ios get pushy apns client failed!&quot;&lt;/span&gt;,format.print(System.currentTimeMillis())));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;发送推送&quot;&gt;&lt;a href=&quot;#发送推送&quot; class=&quot;headerlink&quot; title=&quot;发送推送&quot;&gt;&lt;/a&gt;发送推送&lt;/h2&gt;&lt;p&gt;关于消息的推送，注意一定要使用异步操作，Pushy发送消息会返回一个Netty Future对象，通过它可以拿到消息发送的情况。&lt;/p&gt;
&lt;p&gt;APNs服务器可以保证同时发送1500条消息，当超过这个限制时，Pushy会缓存消息，所以我们不必担心异步操作发送的消息过多（当我们的消息非常多，达到上亿时，我们也得做一些控制，避免缓存过大，内存不足，Pushy给出了使用Semaphore的解决方法）。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Future&amp;lt;PushNotificationResponse&amp;lt;SimpleApnsPushNotification&amp;gt;&amp;gt; future = apnsClient.sendNotification(pushNotification);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          future.addListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PushNotificationResponseListener&amp;lt;SimpleApnsPushNotification&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;operationComplete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; PushNotificationFuture&amp;lt;SimpleApnsPushNotification, PushNotificationResponse&amp;lt;SimpleApnsPushNotification&amp;gt;&amp;gt; future)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (future.isSuccess()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	            &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; PushNotificationResponse&amp;lt;SimpleApnsPushNotification&amp;gt; pushNotificationResponse = future.getNow();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pushNotificationResponse.isAccepted()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              successCnt.incrementAndGet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              Date invalidTime = pushNotificationResponse.getTokenInvalidationTimestamp();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (invalidTime != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  System.out.println(_.f(&lt;span class=&quot;string&quot;&gt;&quot;[%s][ERROR]Notification deviceToken=&quot;&lt;/span&gt;+token+&lt;span class=&quot;string&quot;&gt;&quot; rejected by the APNs gateway:&quot;&lt;/span&gt; + pushNotificationResponse.getRejectionReason()+&lt;span class=&quot;string&quot;&gt;&quot;\t...and the token is invalid as of &quot;&lt;/span&gt; + pushNotificationResponse.getTokenInvalidationTimestamp(),format.print(System.currentTimeMillis())));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              	System.out.println(_.f(&lt;span class=&quot;string&quot;&gt;&quot;[%s][ERROR]Notification deviceToken=&quot;&lt;/span&gt;+token+&lt;span class=&quot;string&quot;&gt;&quot; rejected by the APNs gateway:&quot;&lt;/span&gt; + pushNotificationResponse.getRejectionReason(),format.print(System.currentTimeMillis())));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          System.out.println(_.f(&lt;span class=&quot;string&quot;&gt;&quot;[%s][ERROR]send notification device token=&quot;&lt;/span&gt;+token+&lt;span class=&quot;string&quot;&gt;&quot; is failed:&quot;&lt;/span&gt; + future.cause().getMessage(),format.print(System.currentTimeMillis())));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      latch.countDown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      semaphore.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
      <category term="pushy" scheme="http:zhuhaijun.cn/tags/pushy/"/>
    
  </entry>
  
  <entry>
    <title>kafka 生产者和消费者</title>
    <link href="http:zhuhaijun.cn/2018/07/25/kafka-%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <id>http:zhuhaijun.cn/2018/07/25/kafka-生产者和消费者/</id>
    <published>2018-07-25T08:08:46.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="KafkaProducer"><a href="#KafkaProducer" class="headerlink" title="KafkaProducer"></a>KafkaProducer</h1><p>KafkaProducer初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="keyword">null</span> ;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>,QueueConstants.BROKER_LIST);</span><br><span class="line">        props.put(<span class="string">"acks"</span>, <span class="string">"all"</span>);</span><br><span class="line">        props.put(<span class="string">"retries"</span>, <span class="number">1</span>);</span><br><span class="line">        props.put(<span class="string">"batch.size"</span>, <span class="number">16384</span>);</span><br><span class="line">        props.put(<span class="string">"linger.ms"</span>, <span class="number">1</span>);</span><br><span class="line">        props.put(<span class="string">"buffer.memory"</span>, <span class="number">33554432</span>);</span><br><span class="line">        props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        kafkaProducer = <span class="keyword">new</span> KafkaProducer&lt;String,String&gt;(props);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>KafkaProducer send消息(异步方式)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QueueConstants.kafkaProducer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(topic, msg), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MessageProducer sended,metadata:"</span>+metadata.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="KafkaConsumer"><a href="#KafkaConsumer" class="headerlink" title="KafkaConsumer"></a>KafkaConsumer</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  KafkaConsumer&lt;String, String&gt; <span class="title">createConsumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">"bootstrap.servers"</span>, QueueConstants.BROKER_LIST );</span><br><span class="line">    props.put(<span class="string">"group.id"</span>, groupId);<span class="comment">//必须要使用别的组名称， 如果生产者和消费者都在同一组，则不能访问同一组内的topic数据</span></span><br><span class="line">    props.put(<span class="string">"enable.auto.commit"</span>, <span class="keyword">false</span>);</span><br><span class="line">    props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);<span class="comment">//自动确认offset的时间间隔</span></span><br><span class="line">    props.put(<span class="string">"session.timeout.ms"</span>, <span class="string">"30000"</span>);</span><br><span class="line">    props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">    props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>消费消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       KafkaConsumer&lt;String, String&gt; consumer =createConsumer();</span><br><span class="line">       consumer.subscribe(Arrays.asList(topic));</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">         ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">1000</span>);</span><br><span class="line">         <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">         consumer.commitAsync(<span class="keyword">new</span> OffsetCommitCallback() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets,</span></span></span><br><span class="line"><span class="function"><span class="params">Exception exception)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == exception) &#123;</span><br><span class="line">  <span class="comment">//表示偏移量成功提交</span></span><br><span class="line">              System.out.println(<span class="string">"IosPushySender commit succ"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//表示提交偏移量发生了异常，根据业务进行相关处理</span></span><br><span class="line">              System.out.println(<span class="string">"IosPushySender commit exception ,"</span>+exception.toString());</span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">         <span class="keyword">if</span>(_.nonEmpty(record.value()))&#123;</span><br><span class="line">                 String message  = <span class="keyword">new</span> String(record.value().getBytes(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                 <span class="comment">//...</span></span><br><span class="line">                    <span class="comment">//消费消息</span></span><br><span class="line">         &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">consumer.close();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;maven配置&quot;&gt;&lt;a href=&quot;#maven配置&quot; class=&quot;headerlink&quot; title=&quot;maven配置&quot;&gt;&lt;/a&gt;maven配置&lt;/h1&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
      <category term="kafka" scheme="http:zhuhaijun.cn/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>spring在任意类中getBean</title>
    <link href="http:zhuhaijun.cn/2018/07/25/spring%E5%9C%A8%E4%BB%BB%E6%84%8F%E7%B1%BB%E4%B8%ADgetBean/"/>
    <id>http:zhuhaijun.cn/2018/07/25/spring在任意类中getBean/</id>
    <published>2018-07-25T07:56:55.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ApplicationContextAware接口"><a href="#ApplicationContextAware接口" class="headerlink" title="ApplicationContextAware接口"></a>ApplicationContextAware接口</h1><p>ApplicationContextAware接口的bean在被初始化之后，可以在任意类中拿到容器中的bean</p><h2 id="实现这个接口的代码："><a href="#实现这个接口的代码：" class="headerlink" title="实现这个接口的代码："></a>实现这个接口的代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">context = applicationContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">assertApplicationContext();</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">assertApplicationContext();</span><br><span class="line"><span class="keyword">return</span> (T) context.getBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> </span>&#123;</span><br><span class="line">assertApplicationContext();</span><br><span class="line"><span class="keyword">return</span> context.getBean(requiredType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assertApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (SpringContextUtil.context == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"applicaitonContext属性为null,请检查是否注入了SpringContextUtil!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在application-xml文件中定义对应的bean-或者通过注解-Component标注"><a href="#在application-xml文件中定义对应的bean-或者通过注解-Component标注" class="headerlink" title="在application.xml文件中定义对应的bean,或者通过注解@Component标注"></a>在application.xml文件中定义对应的bean,或者通过注解@Component标注</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"web.utils.SpringContextUtil"</span> <span class="attr">lazy-init</span>=<span class="string">"false"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局spring定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ContextLoaderListener载入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在任意类中，可以直接拿到bean了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoggerDao loggerDao = (LoggerDao) SpringContextUtil.getBean( LoggerDao.class);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ApplicationContextAware接口&quot;&gt;&lt;a href=&quot;#ApplicationContextAware接口&quot; class=&quot;headerlink&quot; title=&quot;ApplicationContextAware接口&quot;&gt;&lt;/a&gt;Application
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http:zhuhaijun.cn/tags/spring/"/>
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mongodb replica sets副本集集群搭建</title>
    <link href="http:zhuhaijun.cn/2018/07/13/mongodb-replica-sets/"/>
    <id>http:zhuhaijun.cn/2018/07/13/mongodb-replica-sets/</id>
    <published>2018-07-13T03:55:10.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、replica-sets简介"><a href="#一、replica-sets简介" class="headerlink" title="一、replica sets简介"></a>一、replica sets简介</h1><p>一个副本集是一组包含相同数据集的mongodb实例组成的集群系统。有一个primary节点，其他的节点为secondary节点。和主从复制的原理一样，副本集也是通过读取oplog来进行数据传输，oplog是一固定大小的表，创建的时候需要指定其大小，当oplog满的时候会删除旧的数据，所以设置其大小非常重要，如果oplog被primary节点覆盖而尚未被sencondary节点读取同步的话就要重新resync。<br>一般的replica sets集群的架构如下图所示：一主一备和一个仲裁（Arbitry）节点，仲裁节点不存放数据。</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/mongo.PNG" alt="replica sets" title="replica sets"></p><p>同步方式采用异步同步的方式，成员节点每隔2s发送一次heartbeat（pings）。当主节点与其他成员节点通信超时10s后，一个sencondary节点将会被选举为primary节点。</p><a id="more"></a><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><ol><li>在所有机器上安装mongodb，我安装在/usr/local/ 目录下。</li><li>创建数据目录，/search/odin/data</li><li><p>在每台机器的mongodb的bin目录下创建配置文件mongod.conf,内如如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbpath=/search/odin/mongodb/data</span><br><span class="line">logpath=/search/odin/mongodb/<span class="built_in">log</span></span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line">port=27017</span><br><span class="line">oplogSize=2048</span><br></pre></td></tr></table></figure></li><li><p>启动mongodb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod -f mongod.conf</span><br></pre></td></tr></table></figure></li></ol><h1 id="三、创建replica-sets"><a href="#三、创建replica-sets" class="headerlink" title="三、创建replica sets"></a>三、创建replica sets</h1><p>下面是搭建一个一主一从一仲裁 三节点replica sets的具体步骤</p><h2 id="添加replSet参数"><a href="#添加replSet参数" class="headerlink" title="添加replSet参数"></a>添加replSet参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dbpath=/search/odin/mongodb/data</span><br><span class="line"></span><br><span class="line">logpath=/search/odin/mongodb/<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">port=27017</span><br><span class="line"></span><br><span class="line">replSet=rs0</span><br></pre></td></tr></table></figure><p>然后启动三台服务器。</p><h2 id="初始化副本集"><a href="#初始化副本集" class="headerlink" title="初始化副本集"></a>初始化副本集</h2><p>连接其中一个节点，初始化命令只能执行一次。<br>可以先配置一个配置文件,然后使用rs.initiate(rsconf)来初始化,例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rsconf = &#123;</span><br><span class="line">        _id: <span class="string">"rs0"</span>,</span><br><span class="line">           members: [</span><br><span class="line">                      &#123;</span><br><span class="line">                       _id: 0,</span><br><span class="line">                       host: <span class="string">"10.143.40.142:27017"</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.initiate(rsconf)</span><br></pre></td></tr></table></figure></p><h2 id="检查初始化配置文件"><a href="#检查初始化配置文件" class="headerlink" title="检查初始化配置文件"></a>检查初始化配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><h2 id="添加secondary和arbitry节点"><a href="#添加secondary和arbitry节点" class="headerlink" title="添加secondary和arbitry节点"></a>添加secondary和arbitry节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 添加一个节点</span></span><br><span class="line">rs.add(<span class="string">"10.143.41.140:27017"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一个arbitary节点</span></span><br><span class="line">rs.add(<span class="string">"10.143.55.191:27017"</span>，<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看副本集的当前状态：</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure><h2 id="rs-remove删除一个结点"><a href="#rs-remove删除一个结点" class="headerlink" title="rs.remove删除一个结点"></a>rs.remove删除一个结点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rs.remove()就一个参数hostname:</span></span><br><span class="line">rs.remove(<span class="string">"mongodb3:27017"</span>)</span><br></pre></td></tr></table></figure><h2 id="rs-addArb添加投票节点"><a href="#rs-addArb添加投票节点" class="headerlink" title="rs.addArb添加投票节点"></a>rs.addArb添加投票节点</h2><p>rs.addArb()同样可以添加投票节点,也只有一个参数为hostname:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.remove(<span class="string">"mongodb3:27017"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.printSlaveReplicationInfo();</span><br></pre></td></tr></table></figure><h2 id="查看数据信息"><a href="#查看数据信息" class="headerlink" title="查看数据信息"></a>查看数据信息</h2><p>rs.isMaster()，是否为主节点</p><p>rs.secondary():是否为从节点</p><p>rs.primary():指出当前副本集中的主节点位于哪个进程</p><p> rs.config():查看详细的配置信息</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、replica-sets简介&quot;&gt;&lt;a href=&quot;#一、replica-sets简介&quot; class=&quot;headerlink&quot; title=&quot;一、replica sets简介&quot;&gt;&lt;/a&gt;一、replica sets简介&lt;/h1&gt;&lt;p&gt;一个副本集是一组包含相同数据集的mongodb实例组成的集群系统。有一个primary节点，其他的节点为secondary节点。和主从复制的原理一样，副本集也是通过读取oplog来进行数据传输，oplog是一固定大小的表，创建的时候需要指定其大小，当oplog满的时候会删除旧的数据，所以设置其大小非常重要，如果oplog被primary节点覆盖而尚未被sencondary节点读取同步的话就要重新resync。&lt;br&gt;一般的replica sets集群的架构如下图所示：一主一备和一个仲裁（Arbitry）节点，仲裁节点不存放数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/mongo.PNG&quot; alt=&quot;replica sets&quot; title=&quot;replica sets&quot;&gt;&lt;/p&gt;
&lt;p&gt;同步方式采用异步同步的方式，成员节点每隔2s发送一次heartbeat（pings）。当主节点与其他成员节点通信超时10s后，一个sencondary节点将会被选举为primary节点。&lt;/p&gt;
    
    </summary>
    
      <category term="mongodb" scheme="http:zhuhaijun.cn/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http:zhuhaijun.cn/tags/mongodb/"/>
    
      <category term="replica sets" scheme="http:zhuhaijun.cn/tags/replica-sets/"/>
    
      <category term="nosql" scheme="http:zhuhaijun.cn/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾收集器和内存分配策略</title>
    <link href="http:zhuhaijun.cn/2018/07/04/JVM%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
    <id>http:zhuhaijun.cn/2018/07/04/JVM垃圾收集器和内存分配策略/</id>
    <published>2018-07-03T16:13:34.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.PNG" alt="图1" title="图1"></p><ul><li>程序计数器、虚拟机栈、本地方法栈 三个区域随线程而生，随线程而灭</li><li>栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作，每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知</li><li>方法区和堆中的内存使用是不确定的，垃圾收集器所关注的就是这部分内存。</li></ul><p>栈帧（Stack Frame） 是用于虚拟机执行时方法调用和方法执行时的数据结构，它是虚拟栈数据区的组成元素。每一个方法从调用到方法返回都对应着一个栈帧入栈出栈的过程。<br>一个线程中方法调用可能很长，很多方法都处于执行状态。对于执行引擎来说，只有处于栈顶的栈帧才是有效的，称为当前栈帧（Current Stack Frame），与之相关联的方法称为当前方法（Current Method）。<br>概念模型上，典型的栈帧主要由 局部变量表（Local Stack Frame）、操作数栈（Operand Stack）、动态链接（Dynamic Linking）、返回地址（Return Address）组成。</p><h1 id="对象存活判定算法"><a href="#对象存活判定算法" class="headerlink" title="对象存活判定算法"></a>对象存活判定算法</h1><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>给每个对象添加一个引用计数器，每当有一个地方引用它时，计数器值加1，当引用失效时，计数器减1。</p><p>但是主流的Java虚拟机里并没有选用这种方法来管理内存，因为它很难解决对象之间相互循环引用的问题。</p><a id="more"></a><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p>主流的实现中，是通过可达性分析（Reachability Analysis）来判断对象是否存活。</p><p>基本思路：<br>通过一系列的成为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走的路径成为引用链（Reference Chain）。当一个对象到GC Roots没有任务引用链相连时，证明此对象不可用，就会被判定为可回收对象。</p><p>Java语言中，可作为GC Roots的对象包括下面几种：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>JDK1.2之后，引用分为4种，引用强度以此减弱：</p><ol><li>强引用（Strong Reference）:只要强引用在，垃圾收集器永远不会回收掉被引用的对象</li><li>软引用（Soft Reference）：系统将要发生内存溢出之前，将会把这些对象列进回收范围之中进行第二次回收</li><li>弱引用（Weak Reference）:被弱引用关联的对象只能生存到下一次垃圾收集发生之前</li><li>虚引用（Phantom Reference）：唯一目的是能在这个对象被收集器回收时收到一个系统通知。</li></ol><h2 id="对象死亡的步骤"><a href="#对象死亡的步骤" class="headerlink" title="对象死亡的步骤"></a>对象死亡的步骤</h2><p>可达性分析算法中不可达的对象，会至少经历两次标记的过程，才会死亡：</p><ol><li>可达性分析后发现没有与GC Roots相连接的引用链，那么会被<strong>第一次标记</strong>并进行一次筛选</li><li>帅选：如果对象没有覆盖finalize()方法或finalize()已经被虚拟机调用过，虚拟机会将不会再执行finalize()方法</li><li>如果这个对象判断为有必要执行finalize()，那么这个对象会被放置在一个F-Queue队列中，稍后会由一个Finalizer线程去执行finalize()。finalize()方法是对象逃逸死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模标记。</li><li>第二次标记时它被移除出“即将回收”的集合，这时候还没逃脱，就真的被回收了。</li></ol><h2 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h2><p>方法区在HotSpot虚拟机中的永久代，永久代的垃圾收集主要回收两部分内容：</p><ol><li>废弃常量</li><li>无用的类<ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li></ul></li></ol><h1 id="新生代、老年代、永久代"><a href="#新生代、老年代、永久代" class="headerlink" title="新生代、老年代、永久代"></a>新生代、老年代、永久代</h1><h3 id="新生代-堆中"><a href="#新生代-堆中" class="headerlink" title="新生代(堆中)"></a>新生代(堆中)</h3><p>主要是用来存放新生的对象。一般占据堆的1/3空间。由于频繁创建对象，所以新生代会频繁触发<code>MinorGC</code>进行垃圾回收。<br>新生代又分为Eden区、Survivor（ServivorFrom、ServivorTo）三个区(默认比例是8:1:1),采用<code>复制算法</code>。</p><h3 id="老年代（堆中）"><a href="#老年代（堆中）" class="headerlink" title="老年代（堆中）"></a>老年代（堆中）</h3><p>是存放那些在程序中经历了好几次回收仍然还活着或者特别大的对象（这个大就要看你是否设置了-XX：PretenureSizeThreshold 参数了）<br>老年代采用的是<code>标记-清除</code>或者<code>标记-整理</code>算法，这两个算法主要看虚拟机采用的哪个收集器，两种算法的区别是：标记-清除可能会产生大量连续的内存碎片。<br>在老年代中的GC则为<code>Major GC</code>。Major GC和Full GC会造成stop-the-world。</p><h3 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h3><p>JVM的方法区，也被称为永久代。<br>在这里都是放着一些被虚拟机加载的类信息，静态变量，常量等数据。这个区中的东西比老年代和新生代更不容易回收</p><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h2 id="标记-清除算法（Mark-Sweep）"><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a>标记-清除算法（Mark-Sweep）</h2><p>分为“标记”和“清除”两个阶段。</p><p>不足：<br>效率问题，标记和清除的效率都不高<br>会产生大量的内存碎片</p><h2 id="复制算法（Copying）"><a href="#复制算法（Copying）" class="headerlink" title="复制算法（Copying）"></a>复制算法（Copying）</h2><p>将内存按容量分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次性清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也不用考虑内存碎片等复杂情况。</p><p>现在商业虚拟机都采用这种算法来回收<code>新生代</code>。<br>不过是把内存分为一块较大的 Eden空间和两块较小的Survivor空间。 每次使用Eden和其中一块Survivor空间，当回收时，将Eden和Survivor中还存活的对象一次性复制到另外一块Surv空间上，最后清理掉Eden和刚才用过的Survivor空间。</p><p>如果另外一块Survivor空间没有足够的空间存放上一次新生代收集下来的存活对象，这些对象将直接通过分配担保机制进入<code>老年代</code>。</p><p>HotSpot虚拟机默认Eden和Survivor的大小比例是8:1。</p><h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h2><p>标记过程仍然和“标记-清除”算法一样，但是后续不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>根据对象存活周期的不同将内存分为几块：<br>一般把Java堆分为新生代和老年代。<br>新生代中，每次垃圾收集时，都会发现有大量对象死去，只有少量存活，那就选用复制算法。<br>老年代中，因为对象存活率高，没有额外空间对它进行分配担保，就必须使用“标记-清理”或”标记-整理”算法来进行回收。</p><h1 id="HotSpot的算法实现"><a href="#HotSpot的算法实现" class="headerlink" title="HotSpot的算法实现"></a>HotSpot的算法实现</h1><h2 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h2><p>GC进行的时候，需要进行可达性分析，枚举根节点，可达性分析需要Stop The World。<br>可以作为GC Roots的节点主要在全局行的引用与执行上下文中。<br>当执行系统停顿下来后，虚拟机并不需要一个不漏地检查完所有执行上下文和全局的引用位置。HotSpot的实现中，使用一组称为OopMap的数据结构来直接得知哪些地方存着对象的引用。</p><h2 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h2><p>在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举。HotSpot没有为每条指令都生成OopMap，只是在特定的位置记录下这些信息，这些位置称为安全点（Safepoint）。</p><p>程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。</p><h2 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h2><p>安全区域是指在一段代码片段之中，引用关系不会发生变化，在这个区域中的任意地方开始GC都是安全的。</p><p>线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.PNG&quot; alt=&quot;图1&quot; title=&quot;图1&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序计数器、虚拟机栈、本地方法栈 三个区域随线程而生，随线程而灭&lt;/li&gt;
&lt;li&gt;栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作，每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知&lt;/li&gt;
&lt;li&gt;方法区和堆中的内存使用是不确定的，垃圾收集器所关注的就是这部分内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;栈帧（Stack Frame） 是用于虚拟机执行时方法调用和方法执行时的数据结构，它是虚拟栈数据区的组成元素。每一个方法从调用到方法返回都对应着一个栈帧入栈出栈的过程。&lt;br&gt;一个线程中方法调用可能很长，很多方法都处于执行状态。对于执行引擎来说，只有处于栈顶的栈帧才是有效的，称为当前栈帧（Current Stack Frame），与之相关联的方法称为当前方法（Current Method）。&lt;br&gt;概念模型上，典型的栈帧主要由 局部变量表（Local Stack Frame）、操作数栈（Operand Stack）、动态链接（Dynamic Linking）、返回地址（Return Address）组成。&lt;/p&gt;
&lt;h1 id=&quot;对象存活判定算法&quot;&gt;&lt;a href=&quot;#对象存活判定算法&quot; class=&quot;headerlink&quot; title=&quot;对象存活判定算法&quot;&gt;&lt;/a&gt;对象存活判定算法&lt;/h1&gt;&lt;h2 id=&quot;引用计数算法&quot;&gt;&lt;a href=&quot;#引用计数算法&quot; class=&quot;headerlink&quot; title=&quot;引用计数算法&quot;&gt;&lt;/a&gt;引用计数算法&lt;/h2&gt;&lt;p&gt;给每个对象添加一个引用计数器，每当有一个地方引用它时，计数器值加1，当引用失效时，计数器减1。&lt;/p&gt;
&lt;p&gt;但是主流的Java虚拟机里并没有选用这种方法来管理内存，因为它很难解决对象之间相互循环引用的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
      <category term="jvm" scheme="http:zhuhaijun.cn/tags/jvm/"/>
    
      <category term="gc" scheme="http:zhuhaijun.cn/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>红黑二叉查找树</title>
    <link href="http:zhuhaijun.cn/2018/07/03/RedBlackBST/"/>
    <id>http:zhuhaijun.cn/2018/07/03/RedBlackBST/</id>
    <published>2018-07-03T08:28:09.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h1><p>定义：一棵2-3查找树或为一棵空树，或由以下结点组成：</p><ul><li>2-结点，含有一个键（及其对应的值）和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。</li><li>3-结点，还有两个键（及其对应的值）和三条链接，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点。</li><li>我们将指向一棵空树的链接称为空链接。</li></ul><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/2-3tree.PNG" alt="2-3查找树" title="2-3查找树"></p><a id="more"></a><h1 id="红黑二叉查找树"><a href="#红黑二叉查找树" class="headerlink" title="红黑二叉查找树"></a>红黑二叉查找树</h1><h2 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h2><p>我们将树中的链接分为两种类型：</p><ul><li>红链接：将两个2-结点连接起来构成一个3-结点</li><li>黑链接：则是2-3树中的普通链接</li></ul><p>我们将3-结点表示为由一条左斜的红色链接相连的2个结点</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/redblack_1.PNG" alt="由一条红色左链接相连的两个2-结点表示一个3-结点" title="由一条红色左链接相连的两个2-结点表示一个3-结点"></p><p>红黑二叉查找树既是二叉查找树，又是2-3查找树，所以我们可以将两个算法的有点结合起来，二叉查找树简洁高效的查找方法和2-3树中高效的平衡插入算法。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h2><p>为方便起见，每个结点都只会有一条指向自己的链接（从它的父节点指向它），我们将链接的颜色保存在表示结点的Node数据类型的布尔变量中，如果指向它的链接是红色的，那么该变量为true，黑色为false，我们约定空链接为黑色。</p><p>颜色表示的代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node root ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node x )</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x.color == RED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">  Key key ;</span><br><span class="line">  Value val;</span><br><span class="line">  Node left , right ;</span><br><span class="line">  <span class="keyword">int</span> N ;</span><br><span class="line">  <span class="keyword">boolean</span> color;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key , Value val ; <span class="keyword">int</span> N , <span class="keyword">boolean</span> color)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.val = val ;</span><br><span class="line">    <span class="keyword">this</span>.N = N;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="旋转与颜色转换"><a href="#旋转与颜色转换" class="headerlink" title="旋转与颜色转换"></a>旋转与颜色转换</h2><h3 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h3><p>假设我们有一条红色的右链接，需要被转化为左链接，这个操作叫做 左旋转。<br>只是将用两个键中较小者作为根结点变为将较大者作为根结点。</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/rotateLeft_1.PNG" alt="左旋转" title="左旋转"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateLeft</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.right)</span></span>;</span><br><span class="line">  Node x = h.right;</span><br><span class="line">  x.left = h ;</span><br><span class="line">  x.color = h.color;</span><br><span class="line">  h.color = RED ;</span><br><span class="line">  x.N = h.N;</span><br><span class="line">  h.N = size( h.left ) + size( h.right ) + <span class="number">1</span> ;</span><br><span class="line">  <span class="keyword">return</span> x ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a>右旋转</h3><p>原理和左旋转一样</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/rotateRight_1.PNG" alt="右旋转" title="右旋转"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateRight</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.left)</span></span>;</span><br><span class="line">  Node x = h.left;</span><br><span class="line">  x.right = h ;</span><br><span class="line">  x.color = h.color;</span><br><span class="line">  h.color = RED ;</span><br><span class="line">  x.N = h.N;</span><br><span class="line">  h.N = size( h.left ) + size( h.right ) + <span class="number">1</span> ;</span><br><span class="line">  <span class="keyword">return</span> x ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色转换"><a href="#颜色转换" class="headerlink" title="颜色转换"></a>颜色转换</h3><p>当一个结点有两个红色结点的时候，除了需要将子结点的颜色由红变黑，还需要将父节点的颜色由黑变红</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/flipColors.PNG" alt="颜色转换" title="颜色转换"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">flipColors</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">  <span class="keyword">assert</span> !isRed(h);</span><br><span class="line">  <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.left)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">assert</span> <span class="title">isRed</span><span class="params">(h.right)</span></span>;</span><br><span class="line">  h.color = RED;</span><br><span class="line">  h.left.color = BLACK;</span><br><span class="line">  h.right.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根结点总是黑色"><a href="#根结点总是黑色" class="headerlink" title="根结点总是黑色"></a>根结点总是黑色</h3><p>颜色转换会使根结点变成红色，这时候我们将根结点设为黑色。注意，每当根结点由红变黑时，树的黑链接高度就会加1</p><h2 id="插入新键"><a href="#插入新键" class="headerlink" title="插入新键"></a>插入新键</h2><p>插入新键总是用红色链接将新节点和它的父结点相连，然后需要的时候，再进行旋转，颜色变换操作。</p><h3 id="向单个2-结点中插入新键（这个2-结点是根结点）"><a href="#向单个2-结点中插入新键（这个2-结点是根结点）" class="headerlink" title="向单个2-结点中插入新键（这个2-结点是根结点）"></a>向单个2-结点中插入新键（这个2-结点是根结点）</h3><ol><li>如果新插入的结点的键小于老键，直接新增一个红色的结点即可</li><li>如果新插入的结点的键大于老键，新增的红色结点会产生一条红色的右链接，执行左旋转即可。</li></ol><h3 id="树底部的2-结点插入新键"><a href="#树底部的2-结点插入新键" class="headerlink" title="树底部的2-结点插入新键"></a>树底部的2-结点插入新键</h3><p>同<em>向单个2-结点中插入新键</em></p><h3 id="向一棵双键树（即一个3-结点）中插入新键"><a href="#向一棵双键树（即一个3-结点）中插入新键" class="headerlink" title="向一棵双键树（即一个3-结点）中插入新键"></a>向一棵双键树（即一个3-结点）中插入新键</h3><ol><li>新键小于树中的2个键</li><li>两者之间</li><li>新键大于树中的两个键</li></ol><p>过程如图所示：</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/redblack_3.PNG" alt="向一棵双键树中新插入一个新键的三种情况" title="向一棵双键树中新插入一个新键的三种情况"></p><h3 id="插入实现"><a href="#插入实现" class="headerlink" title="插入实现"></a>插入实现</h3><p>总之，只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作即可。</p><ol><li>如果右子结点是红色的，而左子结点是黑色的，进行左旋转</li><li>如果左子结点是红色的，且它的左子结点也是红色的，进行右旋转</li><li>如果左右子结点都是红色的，进行颜色转换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key , Value val)</span></span>&#123;</span><br><span class="line">  <span class="comment">//查找key，找到则更新其值，否则为它新建一个结点。</span></span><br><span class="line">  root = put(root，key，val);</span><br><span class="line">  root.color = BLACK; <span class="comment">//根结点总是黑色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node h , Key key , Value val)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (h == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//标准的插入操作，和父节点用红链接相连</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node(key , val , <span class="number">1</span>, RED);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">  <span class="keyword">if</span> (cmp &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">    h.left = put(h.left,key,val);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">    h.right = put(h.right , key ,val );</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    h.val = val ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//除了这三条if语句，红黑树中put()的递归实现和二叉查找树中的put()的实现完全相同</span></span><br><span class="line">  <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left)) &#123;</span><br><span class="line">    h = rotateLeft(h);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left) ) &#123;</span><br><span class="line">    h = rotateRight(h);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.right)) &#123;</span><br><span class="line">    flipColors(h);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h.N = size(h .left)+ size (h.right )  + <span class="number">1</span> ;</span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2-3查找树&quot;&gt;&lt;a href=&quot;#2-3查找树&quot; class=&quot;headerlink&quot; title=&quot;2-3查找树&quot;&gt;&lt;/a&gt;2-3查找树&lt;/h1&gt;&lt;p&gt;定义：一棵2-3查找树或为一棵空树，或由以下结点组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-结点，含有一个键（及其对应的值）和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。&lt;/li&gt;
&lt;li&gt;3-结点，还有两个键（及其对应的值）和三条链接，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点。&lt;/li&gt;
&lt;li&gt;我们将指向一棵空树的链接称为空链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/2-3tree.PNG&quot; alt=&quot;2-3查找树&quot; title=&quot;2-3查找树&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
      <category term="tree" scheme="http:zhuhaijun.cn/tags/tree/"/>
    
  </entry>
  
</feed>
