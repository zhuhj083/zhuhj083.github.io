<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m somebody</title>
  
  <subtitle>任重而道远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http:zhuhaijun.cn/"/>
  <updated>2019-08-22T12:55:55.679Z</updated>
  <id>http:zhuhaijun.cn/</id>
  
  <author>
    <name>Zhu Haijun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring ImportSelector介绍.md</title>
    <link href="http:zhuhaijun.cn/2019/08/22/Spring%20ImportSelector%E4%BB%8B%E7%BB%8D/"/>
    <id>http:zhuhaijun.cn/2019/08/22/Spring ImportSelector介绍/</id>
    <published>2019-08-22T08:32:51.000Z</published>
    <updated>2019-08-22T12:55:55.679Z</updated>
    
    <content type="html"><![CDATA[<p>ImportSelecto的用途比较简单，可以根据启动的相关环境配置来决定让哪些类能够被Spring容器初始化。</p><p>Spring中，在<code>@Configuration</code>标注的Class（配置类）上可以使用<code>@Import</code>引入其它的配置类，其实它还可以引入<code>org.springframework.context.annotation.ImportSelector</code>的实现类。</p><h1 id="一-ImportSelector接口说明"><a href="#一-ImportSelector接口说明" class="headerlink" title="一.ImportSelector接口说明"></a>一.ImportSelector接口说明</h1><p>ImportSelector接口只定义了一个<code>selectImports()</code>，用于指定需要注册为bean的Class名称。</p><p>当在<code>@Configuration</code>标注的Class上使用<code>@Import</code>引入了一个ImportSelector实现类后，会把实现类中返回的Class名称都定义为bean。    </p><h2 id="1-源码解读"><a href="#1-源码解读" class="headerlink" title="1.源码解读"></a>1.源码解读</h2><p>下面是ImportSelector的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by types that determine which @&#123;<span class="doctag">@link</span> Configuration&#125;</span></span><br><span class="line"><span class="comment"> * class(es) should be imported based on a given selection criteria, usually one or more</span></span><br><span class="line"><span class="comment"> * annotation attributes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;An &#123;<span class="doctag">@link</span> ImportSelector&#125; may implement any of the following</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.Aware Aware&#125; interfaces, and their respective</span></span><br><span class="line"><span class="comment"> * methods will be called prior to &#123;<span class="doctag">@link</span> #selectImports&#125;:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> org.springframework.context.EnvironmentAware EnvironmentAware&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> org.springframework.context.ResourceLoaderAware ResourceLoaderAware&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;ImportSelectors are usually processed in the same way as regular &#123;<span class="doctag">@code</span> <span class="doctag">@Import</span>&#125;</span></span><br><span class="line"><span class="comment"> * annotations, however, it is also possible to defer selection of imports until all</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; classes have been processed (see &#123;<span class="doctag">@link</span> DeferredImportSelector&#125;</span></span><br><span class="line"><span class="comment"> * for details).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DeferredImportSelector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Import</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ImportBeanDefinitionRegistrar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Configuration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Select and return the names of which class(es) should be imported based on</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125; of the importing @&#123;<span class="doctag">@link</span> Configuration&#125; class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口文档上写明，主要作用是收集需要导入的配置类，如果该接口的实现类同时实现下列接</p><ul><li>EnvironmentAware</li><li>BeanFactoryAware</li><li>BeanClassLoaderAware</li><li>ResourceLoaderAware</li></ul><p>那么在调用其selectImports方法之前先调用上述接口中对应的方法，如果需要在所有的@Configuration处理完再导入时可以实现DeferredImportSelector接口。</p><a id="more"></a><h2 id="2-举例说明"><a href="#2-举例说明" class="headerlink" title="2.举例说明"></a>2.举例说明</h2><h3 id="2-1-定义一个接口以及2个实现类"><a href="#2-1-定义一个接口以及2个实现类" class="headerlink" title="2.1 定义一个接口以及2个实现类"></a>2.1 定义一个接口以及2个实现类</h3><p>HelloService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloServiceImplA.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImplA</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloServiceImplB.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImplB</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-ImportSelector实现"><a href="#2-2-ImportSelector实现" class="headerlink" title="2.2 ImportSelector实现"></a>2.2 ImportSelector实现</h3><h4 id="2-2-1-实现一"><a href="#2-2-1-实现一" class="headerlink" title="2.2.1 实现一"></a>2.2.1 实现一</h4><p>定义了一个ImportSelector实现类HelloImportSelector1，直接指定了需要把HelloService接口的实现类HelloServiceA和HelloServiceB定义为bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importSelector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.service.impl.HelloServiceImplA;</span><br><span class="line"><span class="keyword">import</span> com.zhj.service.impl.HelloServiceImplB;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImportSelector1</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;HelloServiceImplA.class.getName(), HelloServiceImplB.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义了<code>@Configuration</code>配置类HelloConfiguration1，指定了<code>@Import</code>的是HelloImportSelector1。</p><p>HelloConfiguration1.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importSelector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(HelloImportSelector1.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfiguration1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当加载配置类HelloConfiguration1的时候会一并把HelloServiceA和HelloServiceB注册为Spring bean。可以</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(HelloConfiguration1.class);</span><br><span class="line">    Map&lt;String,HelloService&gt; helloServices = annotationConfigApplicationContext.getBeansOfType(HelloService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String key : helloServices.keySet())&#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">        helloServices.get(key).doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.zhj.service.impl.HelloServiceImplA</span><br><span class="line">Hello A</span><br><span class="line">com.zhj.service.impl.HelloServiceImplB</span><br><span class="line">Hello B</span><br></pre></td></tr></table></figure><h4 id="2-2-2-直接在HelloConfiguration中定义bean或者import。"><a href="#2-2-2-直接在HelloConfiguration中定义bean或者import。" class="headerlink" title="2.2.2 直接在HelloConfiguration中定义bean或者import。"></a>2.2.2 直接在HelloConfiguration中定义bean或者import。</h4><p>看到这里可能你会觉得其实它也没什么用，因为整一个ImportSelector实现类那么麻烦，还不如直接在HelloConfiguration中定义bean或者import。</p><p>在不引入ImportSelector的情况下，下面的两种方式都可以达到相同的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接在HelloConfiguration中import</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;HelloServiceImplA.class, HelloServiceImplB.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfigurationDirect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接在HelloConfiguration中定义bean</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfigurationDefineBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloServiceImplA <span class="title">helloServiceImplA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloServiceImplA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloServiceImplB <span class="title">helloServiceImplB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloServiceImplB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(HelloConfigurationDirect.class);</span><br><span class="line">    Map&lt;String,HelloService&gt; helloServices = annotationConfigApplicationContext.getBeansOfType(HelloService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String key : helloServices.keySet())&#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">        helloServices.get(key).doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefineBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(HelloConfigurationDefineBean.class);</span><br><span class="line">    Map&lt;String,HelloService&gt; helloServices = annotationConfigApplicationContext.getBeansOfType(HelloService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String key : helloServices.keySet())&#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">        helloServices.get(key).doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接是固定的bean定义，那完全可以用上面的方式代替。</p><p>但如果需要动态的带有逻辑性的定义bean，则使用ImportSelector还是很有用处的。因为在它的<code>selectImports()</code>你可以实现各种获取bean Class的逻辑，通过其参数<code>AnnotationMetadata importingClassMetadata</code>可以获取到<code>@Import</code>标注的Class的各种信息，包括其Class名称，实现的接口名称、父类名称、添加的其它注解等信息，通过这些额外的信息可以辅助我们选择需要定义为Spring bean的Class名称。</p><h4 id="2-2-3-ComponentScan扫描方法"><a href="#2-2-3-ComponentScan扫描方法" class="headerlink" title="2.2.3 @ComponentScan扫描方法"></a>2.2.3 @ComponentScan扫描方法</h4><p>现假设我们在HelloConfiguration上使用了<code>@ComponentScan</code>进行bean定义扫描我们期望HelloImportSelector也可以扫描<code>@ComponentScan</code>指定的Package下HelloService实现类并把它们定义为bean，则HelloImportSelector和HelloConfiguration可以改为如下这样：</p><p>HelloConfigurationWithScan.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importSelector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zhj.service.impl"</span>)</span><br><span class="line"><span class="meta">@Import</span>(HelloImportSelector4.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfigurationWithScan</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloImportSelectorWithScan.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importSelector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.AssignableTypeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.TypeFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImportSelectorWithScan</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以看到在HelloImportSelector的实现中获取了HelloConfiguration类上标注的<span class="doctag">@ComponentScan</span>的basePackages属性值</span></span><br><span class="line"><span class="comment">     * 并使用ClassPathScanningCandidateComponentProvider进行了扫描。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可能有的时候你不希望依赖于配置类上的<span class="doctag">@ComponentScan</span>，而期望直接扫描配置类所在的包。</span></span><br><span class="line"><span class="comment">     * 此时可以通过importingClassMetadata.getClassName()获取配置类的Class名称，进而获取其package名称。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> importingClassMetadata</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(ComponentScan.class.getName());</span><br><span class="line">        String[] basePackages = (String[]) annotationAttributes.get(<span class="string">"basePackages"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; basePackages.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"basePackages_"</span>+i+<span class="string">"："</span>+basePackages[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ClassPathScanningCandidateComponentProvider scanner = <span class="keyword">new</span> ClassPathScanningCandidateComponentProvider(<span class="keyword">false</span>);</span><br><span class="line">        TypeFilter helloServiceFilter = <span class="keyword">new</span> AssignableTypeFilter(HelloService.class);</span><br><span class="line">        scanner.addIncludeFilter(helloServiceFilter);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; classes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">            scanner.findCandidateComponents(basePackage).forEach(beanDefinition -&gt; classes.add(beanDefinition.getBeanClassName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set转换为array</span></span><br><span class="line">        <span class="keyword">return</span> classes.toArray(<span class="keyword">new</span> String[classes.size()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithScan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(HelloConfigurationWithScan.class);</span><br><span class="line">    Map&lt;String,HelloService&gt; helloServices = annotationConfigApplicationContext.getBeansOfType(HelloService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String key : helloServices.keySet())&#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">        helloServices.get(key).doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-期望直接扫描配置类所在的包"><a href="#2-2-4-期望直接扫描配置类所在的包" class="headerlink" title="2.2.4 期望直接扫描配置类所在的包"></a>2.2.4 期望直接扫描配置类所在的包</h4><p>可以看到在HelloImportSelector的实现中获取了HelloConfiguration类上标注的<code>@ComponentScan</code>的basePackages属性值，并使用ClassPathScanningCandidateComponentProvider进行了扫描。可能有的时候你不希望依赖于配置类上的<code>@ComponentScan</code>，而期望直接扫描配置类所在的包。</p><p>此时可以通过<code>importingClassMetadata.getClassName()</code>获取配置类的Class名称，进而获取其package名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">    String packageName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        packageName = Class.forName(importingClassMetadata.getClassName()).getPackage().getName();</span><br><span class="line">        System.out.println(<span class="string">"packageName="</span>+packageName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    String[] basePackages = <span class="keyword">new</span> String[] &#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; basePackages.length; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"4_basePackages_"</span>+i+<span class="string">"："</span>+basePackages[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClassPathScanningCandidateComponentProvider scanner = <span class="keyword">new</span> ClassPathScanningCandidateComponentProvider(<span class="keyword">false</span>);</span><br><span class="line">    TypeFilter helloServiceFilter = <span class="keyword">new</span> AssignableTypeFilter(HelloService.class);</span><br><span class="line">    scanner.addIncludeFilter(helloServiceFilter);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; classes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        scanner.findCandidateComponents(basePackage).forEach(beanDefinition -&gt; classes.add(beanDefinition.getBeanClassName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classes.toArray(<span class="keyword">new</span> String[classes.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-5-更通用一点的做法"><a href="#2-2-5-更通用一点的做法" class="headerlink" title="2.2.5 更通用一点的做法"></a>2.2.5 更通用一点的做法</h4><p>更通用一点的做法可能你还是期望扫描的package跟<code>@Configuration</code>上的<code>@ComponentScan</code>的basePackages保持一致或者在没有指定<code>@ComponentScan</code>时扫描配置类所在的package。</p><p>@ComponentScan`的basePackages如果没有指定，默认是把配置类当前所在的package当做basePackage。所以为了满足这些需求，我们的HelloImportSelector可以定义为如下这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">    String[] basePackages = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (importingClassMetadata.hasAnnotation(ComponentScan.class.getName())) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(ComponentScan.class.getName());</span><br><span class="line">        basePackages = (String[]) annotationAttributes.get(<span class="string">"basePackages"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (basePackages == <span class="keyword">null</span> || basePackages.length == <span class="number">0</span>) &#123;<span class="comment">//ComponentScan的basePackages默认为空数组</span></span><br><span class="line">        String basePackage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            basePackage = Class.forName(importingClassMetadata.getClassName()).getPackage().getName();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        basePackages = <span class="keyword">new</span> String[] &#123;basePackage&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    ClassPathScanningCandidateComponentProvider scanner = <span class="keyword">new</span> ClassPathScanningCandidateComponentProvider(<span class="keyword">false</span>);</span><br><span class="line">    TypeFilter helloServiceFilter = <span class="keyword">new</span> AssignableTypeFilter(HelloService.class);</span><br><span class="line">    scanner.addIncludeFilter(helloServiceFilter);</span><br><span class="line">    Set&lt;String&gt; classes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        scanner.findCandidateComponents(basePackage).forEach(beanDefinition -&gt; classes.add(beanDefinition.getBeanClassName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classes.toArray(<span class="keyword">new</span> String[classes.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-为ImportSelector定义特定的注解"><a href="#2-3-为ImportSelector定义特定的注解" class="headerlink" title="2.3 为ImportSelector定义特定的注解"></a>2.3 为ImportSelector定义特定的注解</h3><p>当我们觉得在<code>@Configuration</code>配置类上使用<code>@Import(HelloImportSelector.class)</code>太麻烦，或者是需要在ImportSelector实现类中使用一些特定的配置时就可以考虑为ImportSelector实现类定义一个特定的注解，在该注解上使用<code>@Import(HelloImportSelector.class)</code>。</p><p>如下针对上面的HelloImportSelector定义了一个<code>@HelloServiceScan</code>注解，用于扫描HelloService实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importSelector.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.importSelector.HelloImportSelector1;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Import</span>(HelloImportSelector1.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HelloServiceScan &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"basePackages"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们的HelloConfiguration类可以改为如下这样，效果跟之前的一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importSelector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.importSelector.annotation.HelloServiceScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@HelloServiceScan</span>(<span class="string">"com.zhj.service.impl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloScanHelloConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样HelloImportSelector在进行bean扫描时可以通过<code>@HelloServiceScan</code>的basePackages属性获取需要扫描的basePackage。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(HelloServiceScan.class.getName());</span><br><span class="line">    String[] basePackages = (String[]) annotationAttributes.get(<span class="string">"basePackages"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//HelloServiceScan的basePackages默认为空数组</span></span><br><span class="line">    <span class="keyword">if</span> (basePackages == <span class="keyword">null</span> || basePackages.length == <span class="number">0</span>) &#123;</span><br><span class="line">        String basePackage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            basePackage = Class.forName(importingClassMetadata.getClassName()).getPackage().getName();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        basePackages = <span class="keyword">new</span> String[] &#123;basePackage&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ClassPathScanningCandidateComponentProvider scanner = <span class="keyword">new</span> ClassPathScanningCandidateComponentProvider(<span class="keyword">false</span>);</span><br><span class="line">    TypeFilter helloServiceFilter = <span class="keyword">new</span> AssignableTypeFilter(HelloService.class);</span><br><span class="line">    scanner.addIncludeFilter(helloServiceFilter);</span><br><span class="line">    Set&lt;String&gt; classes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        scanner.findCandidateComponents(basePackage).forEach(beanDefinition -&gt; classes.add(beanDefinition.getBeanClassName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> classes.toArray(<span class="keyword">new</span> String[classes.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考博文：<a href="https://www.iteye.com/blog/elim-2428994" target="_blank" rel="noopener">https://www.iteye.com/blog/elim-2428994</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ImportSelecto的用途比较简单，可以根据启动的相关环境配置来决定让哪些类能够被Spring容器初始化。&lt;/p&gt;
&lt;p&gt;Spring中，在&lt;code&gt;@Configuration&lt;/code&gt;标注的Class（配置类）上可以使用&lt;code&gt;@Import&lt;/code&gt;引入其它的配置类，其实它还可以引入&lt;code&gt;org.springframework.context.annotation.ImportSelector&lt;/code&gt;的实现类。&lt;/p&gt;
&lt;h1 id=&quot;一-ImportSelector接口说明&quot;&gt;&lt;a href=&quot;#一-ImportSelector接口说明&quot; class=&quot;headerlink&quot; title=&quot;一.ImportSelector接口说明&quot;&gt;&lt;/a&gt;一.ImportSelector接口说明&lt;/h1&gt;&lt;p&gt;ImportSelector接口只定义了一个&lt;code&gt;selectImports()&lt;/code&gt;，用于指定需要注册为bean的Class名称。&lt;/p&gt;
&lt;p&gt;当在&lt;code&gt;@Configuration&lt;/code&gt;标注的Class上使用&lt;code&gt;@Import&lt;/code&gt;引入了一个ImportSelector实现类后，会把实现类中返回的Class名称都定义为bean。    &lt;/p&gt;
&lt;h2 id=&quot;1-源码解读&quot;&gt;&lt;a href=&quot;#1-源码解读&quot; class=&quot;headerlink&quot; title=&quot;1.源码解读&quot;&gt;&lt;/a&gt;1.源码解读&lt;/h2&gt;&lt;p&gt;下面是ImportSelector的源码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; org.springframework.context.annotation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.core.type.AnnotationMetadata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Interface to be implemented by types that determine which @&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Configuration&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * class(es) should be imported based on a given selection criteria, usually one or more&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * annotation attributes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;p&amp;gt;An &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; ImportSelector&amp;#125; may implement any of the following&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.beans.factory.Aware Aware&amp;#125; interfaces, and their respective&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * methods will be called prior to &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #selectImports&amp;#125;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;li&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.context.EnvironmentAware EnvironmentAware&amp;#125;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;li&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware&amp;#125;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;li&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware&amp;#125;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;li&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.context.ResourceLoaderAware ResourceLoaderAware&amp;#125;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;p&amp;gt;ImportSelectors are usually processed in the same way as regular &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;@Import&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * annotations, however, it is also possible to defer selection of imports until all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;@Configuration&lt;/span&gt;&amp;#125; classes have been processed (see &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; DeferredImportSelector&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * for details).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Chris Beams&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 3.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; DeferredImportSelector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; Import&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; ImportBeanDefinitionRegistrar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ImportSelector&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * Select and return the names of which class(es) should be imported based on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * the &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; AnnotationMetadata&amp;#125; of the importing @&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Configuration&amp;#125; class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String[] selectImports(AnnotationMetadata importingClassMetadata);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接口文档上写明，主要作用是收集需要导入的配置类，如果该接口的实现类同时实现下列接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EnvironmentAware&lt;/li&gt;
&lt;li&gt;BeanFactoryAware&lt;/li&gt;
&lt;li&gt;BeanClassLoaderAware&lt;/li&gt;
&lt;li&gt;ResourceLoaderAware&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么在调用其selectImports方法之前先调用上述接口中对应的方法，如果需要在所有的@Configuration处理完再导入时可以实现DeferredImportSelector接口。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http:zhuhaijun.cn/tags/spring/"/>
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring ImportBeanDefinitionRegistrar介绍.md</title>
    <link href="http:zhuhaijun.cn/2019/08/22/Spring%20ImportBeanDefinitionRegistrar%E4%BB%8B%E7%BB%8D/"/>
    <id>http:zhuhaijun.cn/2019/08/22/Spring ImportBeanDefinitionRegistrar介绍/</id>
    <published>2019-08-22T08:32:51.000Z</published>
    <updated>2019-08-22T12:56:26.934Z</updated>
    
    <content type="html"><![CDATA[<p>本文需要介绍的ImportBeanDefinitionRegistrar的用法和作用跟ImportSelector类似。</p><p>唯一的不同点是ImportBeanDefinitionRegistrar的接口方法<code>void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</code>的返回类型是<code>void</code>，且多了一个BeanDefinitionRegistry类型的参数，它允许我们直接通过BeanDefinitionRegistry对象注册bean。</p><h1 id="一-源码"><a href="#一-源码" class="headerlink" title="一.源码"></a>一.源码</h1><p>ImportBeanDefinitionRegistrar源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.context.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by types that register additional bean definitions when</span></span><br><span class="line"><span class="comment"> * processing @&#123;<span class="doctag">@link</span> Configuration&#125; classes. Useful when operating at the bean definition</span></span><br><span class="line"><span class="comment"> * level (as opposed to &#123;<span class="doctag">@code</span> <span class="doctag">@Bean</span>&#125; method/instance level) is desired or necessary.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Along with &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; and &#123;<span class="doctag">@link</span> ImportSelector&#125;, classes of this type</span></span><br><span class="line"><span class="comment"> * may be provided to the @&#123;<span class="doctag">@link</span> Import&#125; annotation (or may also be returned from an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> ImportSelector&#125;).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;An &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125; may implement any of the following</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.Aware Aware&#125; interfaces, and their respective</span></span><br><span class="line"><span class="comment"> * methods will be called prior to &#123;<span class="doctag">@link</span> #registerBeanDefinitions&#125;:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> org.springframework.context.EnvironmentAware EnvironmentAware&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware&#125;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware&#125;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;&#123;<span class="doctag">@link</span> org.springframework.context.ResourceLoaderAware ResourceLoaderAware&#125;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;See implementations and associated unit tests for usage examples.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Import</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ImportSelector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Configuration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register bean definitions as necessary based on the given annotation metadata of</span></span><br><span class="line"><span class="comment"> * the importing &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that &#123;<span class="doctag">@link</span> BeanDefinitionRegistryPostProcessor&#125; types may &lt;em&gt;not&lt;/em&gt; be</span></span><br><span class="line"><span class="comment"> * registered here, due to lifecycle constraints related to &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;</span></span><br><span class="line"><span class="comment"> * class processing.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> importingClassMetadata annotation metadata of the importing class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry current bean definition registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="二-示例"><a href="#二-示例" class="headerlink" title="二. 示例"></a>二. 示例</h1><h3 id="1-示例一"><a href="#1-示例一" class="headerlink" title="1.示例一"></a>1.示例一</h3><p>为了扫描并注册HelloService类型的bean，我们可以自定义如下ImportBeanDefinitionRegistrar实现类。</p><p>在实现类中可以使用ClassPathBeanDefinitionScanner进行扫描并自动注册，它是ClassPathScanningCandidateComponentProvider的子类，所以还是可以添加相同的TypeFilter，然后通过<code>scanner.scan(basePackages)</code>扫描指定的basePackage下满足条件的Class并注册它们为bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importBeanDefinitionRegistrar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.AssignableTypeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.TypeFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImportBeanDefinitionRegistrar1</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(ComponentScan.class.getName());</span><br><span class="line">        String[] basePackages = (String[]) annotationAttributes.get(<span class="string">"basePackages"</span>);</span><br><span class="line"></span><br><span class="line">        ClassPathBeanDefinitionScanner scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(registry, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        TypeFilter helloServiceFilter = <span class="keyword">new</span> AssignableTypeFilter(HelloService.class);</span><br><span class="line">        scanner.addIncludeFilter(helloServiceFilter);</span><br><span class="line">        scanner.scan(basePackages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们的<code>@Configuration</code>配置类可以进行如下定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importBeanDefinitionRegistrar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zhj.service.impl"</span>)</span><br><span class="line"><span class="meta">@Import</span>(HelloImportBeanDefinitionRegistrar.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfiguration1</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自定义注解"><a href="#2-自定义注解" class="headerlink" title="2.自定义注解"></a>2.自定义注解</h3><p>为它定义一个特定的注解也是可以的，比如下面代码为HelloImportBeanDefinitionRegistrar定义了<code>@HelloScan</code>，其value属性和basePackages属性互为别名，用于指定需要扫描的basePackage。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importBeanDefinitionRegistrar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Import</span>(HelloImportBeanDefinitionRegistrar2.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HelloScan &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"basePackages"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了满足<code>@HelloScan</code>指定扫描的basePackage的需求，我们的HelloImportBeanDefinitionRegistrar需要改造为如下这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importBeanDefinitionRegistrar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.AssignableTypeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.TypeFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImportBeanDefinitionRegistrar2</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(HelloScan.class.getName());</span><br><span class="line">        String[] basePackages = (String[]) annotationAttributes.get(<span class="string">"basePackages"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (basePackages == <span class="keyword">null</span> || basePackages.length == <span class="number">0</span>) &#123;<span class="comment">//HelloScan的basePackages默认为空数组</span></span><br><span class="line">            String basePackage = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                basePackage = Class.forName(importingClassMetadata.getClassName()).getPackage().getName();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            basePackages = <span class="keyword">new</span> String[] &#123;basePackage&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; basePackages.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloScan basePackage："</span>+basePackages[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ClassPathBeanDefinitionScanner scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(registry, <span class="keyword">false</span>);</span><br><span class="line">        TypeFilter helloServiceFilter = <span class="keyword">new</span> AssignableTypeFilter(HelloService.class);</span><br><span class="line">        scanner.addIncludeFilter(helloServiceFilter);</span><br><span class="line">        scanner.scan(basePackages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们的HelloConfiguration可以定义为如下这样，它的效果和之前是一模一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importBeanDefinitionRegistrar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@HelloScan</span>(<span class="string">"com.zhj.service.impl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfiguration2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhj.importBeanDefinitionRegistrar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhj.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhj on 2019-08-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImportSelectorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(HelloConfiguration1.class);</span><br><span class="line">        Map&lt;String,HelloService&gt; helloServices = annotationConfigApplicationContext.getBeansOfType(HelloService.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : helloServices.keySet())&#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            helloServices.get(key).doSomething();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(HelloConfiguration2.class);</span><br><span class="line">        Map&lt;String,HelloService&gt; helloServices = annotationConfigApplicationContext.getBeansOfType(HelloService.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : helloServices.keySet())&#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            helloServices.get(key).doSomething();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文需要介绍的ImportBeanDefinitionRegistrar的用法和作用跟ImportSelector类似。&lt;/p&gt;
&lt;p&gt;唯一的不同点是ImportBeanDefinitionRegistrar的接口方法&lt;code&gt;void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)&lt;/code&gt;的返回类型是&lt;code&gt;void&lt;/code&gt;，且多了一个BeanDefinitionRegistry类型的参数，它允许我们直接通过BeanDefinitionRegistry对象注册bean。&lt;/p&gt;
&lt;h1 id=&quot;一-源码&quot;&gt;&lt;a href=&quot;#一-源码&quot; class=&quot;headerlink&quot; title=&quot;一.源码&quot;&gt;&lt;/a&gt;一.源码&lt;/h1&gt;&lt;p&gt;ImportBeanDefinitionRegistrar源码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; org.springframework.context.annotation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.support.BeanDefinitionRegistry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.core.type.AnnotationMetadata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Interface to be implemented by types that register additional bean definitions when&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * processing @&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Configuration&amp;#125; classes. Useful when operating at the bean definition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * level (as opposed to &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;@Bean&lt;/span&gt;&amp;#125; method/instance level) is desired or necessary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;p&amp;gt;Along with &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;@Configuration&lt;/span&gt;&amp;#125; and &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; ImportSelector&amp;#125;, classes of this type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * may be provided to the @&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Import&amp;#125; annotation (or may also be returned from an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; ImportSelector&amp;#125;).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;p&amp;gt;An &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; ImportBeanDefinitionRegistrar&amp;#125; may implement any of the following&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.beans.factory.Aware Aware&amp;#125; interfaces, and their respective&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * methods will be called prior to &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #registerBeanDefinitions&amp;#125;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;li&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.context.EnvironmentAware EnvironmentAware&amp;#125;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;li&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;li&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;li&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; org.springframework.context.ResourceLoaderAware ResourceLoaderAware&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;p&amp;gt;See implementations and associated unit tests for usage examples.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Chris Beams&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 3.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; Import&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; ImportSelector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ImportBeanDefinitionRegistrar&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * Register bean definitions as necessary based on the given annotation metadata of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * the importing &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;@Configuration&lt;/span&gt;&amp;#125; class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * &amp;lt;p&amp;gt;Note that &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; BeanDefinitionRegistryPostProcessor&amp;#125; types may &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; be&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * registered here, due to lifecycle constraints related to &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;@Configuration&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * class processing.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; importingClassMetadata annotation metadata of the importing class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; registry current bean definition registry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registerBeanDefinitions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http:zhuhaijun.cn/tags/spring/"/>
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mac上安装Redis</title>
    <link href="http:zhuhaijun.cn/2019/06/24/Mac%E4%B8%8A%E5%AE%89%E8%A3%85Redis/"/>
    <id>http:zhuhaijun.cn/2019/06/24/Mac上安装Redis/</id>
    <published>2019-06-24T11:40:51.000Z</published>
    <updated>2019-06-24T11:45:02.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><p>redis安装有两种方式：下载源码编译安装、使用homebrew安装。 </p><p>通过homebrew安装redis </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">brew install redis</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>安装完成后redis默认的配置文件redis.conf位于 </p><p>/usr/local/etc </p><p>同时，redis-sentinel.conf也在这里。 </p><p>使用cat命令查看redis.conf： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cat /usr/<span class="built_in">local</span>/etc/redis.conf</span><br></pre></td></tr></table></figure><a id="more"></a><p>包含以下内容(删除了大部分内容)： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># started with the file path as first argument: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Accept connections on the specified port, default is 6379 (IANA #815344). </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If port 0 is specified Redis will not listen on a TCP socket. </span></span><br><span class="line"></span><br><span class="line">port 6379 </span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP listen() backlog. </span></span><br><span class="line"></span><br><span class="line">tcp-backlog 511 </span><br><span class="line"></span><br><span class="line"><span class="comment">#The working directory </span></span><br><span class="line"></span><br><span class="line">dir /usr/<span class="built_in">local</span>/var/db/redis/</span><br></pre></td></tr></table></figure><p>根据以上内容,如果启动时不指定配置文件,redis会使用程序中内置的默认配置.但是只有在开发和测试阶段才考虑使用内置的默认配置，正式环境最好还是提供配置文件，并且一般命名为redis.conf </p><h1 id="启动redis-server"><a href="#启动redis-server" class="headerlink" title="启动redis-server"></a>启动redis-server</h1><p>如果需要给redis服务端指定配置文件，启动命令应该是这样的: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis-server /usr/<span class="built_in">local</span>/etc/redis.conf</span><br></pre></td></tr></table></figure><p>终端输出 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">46286:C 28 Feb 2019 11:36:55.966 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo </span></span><br><span class="line"></span><br><span class="line">46286:C 28 Feb 2019 11:36:55.966 <span class="comment"># Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=46286, just started </span></span><br><span class="line"></span><br><span class="line">46286:C 28 Feb 2019 11:36:55.966 <span class="comment"># Configuration loaded </span></span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:36:55.967 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 4864). </span><br><span class="line"></span><br><span class="line">_._ </span><br><span class="line"></span><br><span class="line">_.-``__ <span class="string">''</span>-._ </span><br><span class="line"></span><br><span class="line">_.-`` `. `_. <span class="string">''</span>-._ Redis 5.0.3 (00000000/0) 64 bit </span><br><span class="line"></span><br><span class="line">.-`` .-```. ```\/ _.,_ <span class="string">''</span>-._ </span><br><span class="line"></span><br><span class="line">( <span class="string">' , .-` | `, ) Running in standalone mode </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'| Port: 6379 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">| `-._ `._ / _.-'</span> | PID: 46286 </span><br><span class="line"></span><br><span class="line">`-._ `-._ `-./ _.-<span class="string">' _.-'</span> </span><br><span class="line"></span><br><span class="line">|`-._`-._ `-.__.-<span class="string">' _.-'</span>_.-<span class="string">'| </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">| `-._`-._ _.-'</span>_.-<span class="string">' | http://redis.io </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`-._ `-._`-.__.-'</span>_.-<span class="string">' _.-'</span> </span><br><span class="line"></span><br><span class="line">|`-._`-._ `-.__.-<span class="string">' _.-'</span>_.-<span class="string">'| </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">| `-._`-._ _.-'</span>_.-<span class="string">' | </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`-._ `-._`-.__.-'</span>_.-<span class="string">' _.-'</span> </span><br><span class="line"></span><br><span class="line">`-._ `-.__.-<span class="string">' _.-'</span> </span><br><span class="line"></span><br><span class="line">`-._ _.-<span class="string">' </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`-.__.-'</span> </span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:36:55.968 <span class="comment"># Server initialized </span></span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:36:55.969 * DB loaded from disk: 0.000 seconds </span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:36:55.969 * Ready to accept connections</span><br></pre></td></tr></table></figure><p>可以看出redis服务器启动成功，并在监听6379端口的网络连接。 </p><p>注意: 使用命令$ <code>redis-server</code>也可以启动,此时并不会加载任何配置文件,使用的是程序中内置(built-in)的默认配置. </p><h1 id="检查redis服务是否启动"><a href="#检查redis服务是否启动" class="headerlink" title="检查redis服务是否启动"></a>检查redis服务是否启动</h1><p>重新打开一个终端窗口，输入命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure><p>该终端输出 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>说明服务器运作正常。 </p><h1 id="关闭redis"><a href="#关闭redis" class="headerlink" title="关闭redis"></a>关闭redis</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>在执行启动命令的终端窗口使用ctrl+c,此时第一个窗口输出 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">^C46286:signal-handler (1551325146) Received SIGINT scheduling shutdown... </span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:39:06.432 <span class="comment"># User requested shutdown... </span></span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:39:06.432 * Saving the final RDB snapshot before exiting. </span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:39:06.434 * DB saved on disk </span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:39:06.434 * Removing the pid file. </span><br><span class="line"></span><br><span class="line">46286:M 28 Feb 2019 11:39:06.434 <span class="comment"># Redis is now ready to exit, bye bye... </span></span><br><span class="line"></span><br><span class="line">zhuhaijundeMacBook-Pro:redis apple$</span><br></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>在另外一个终端窗口执行<code>redis-cli shutdown</code>,此时第一个窗口输出 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">46288:M 28 Feb 2019 11:40:16.348 <span class="comment"># User requested shutdown... </span></span><br><span class="line"></span><br><span class="line">46288:M 28 Feb 2019 11:40:16.348 * Saving the final RDB snapshot before exiting. </span><br><span class="line"></span><br><span class="line">46288:M 28 Feb 2019 11:40:16.349 * DB saved on disk </span><br><span class="line"></span><br><span class="line">46288:M 28 Feb 2019 11:40:16.349 * Removing the pid file. </span><br><span class="line"></span><br><span class="line">46288:M 28 Feb 2019 11:40:16.349 <span class="comment"># Redis is now ready to exit, bye bye...</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装redis&quot;&gt;&lt;a href=&quot;#安装redis&quot; class=&quot;headerlink&quot; title=&quot;安装redis&quot;&gt;&lt;/a&gt;安装redis&lt;/h1&gt;&lt;p&gt;redis安装有两种方式：下载源码编译安装、使用homebrew安装。 &lt;/p&gt;
&lt;p&gt;通过homebrew安装redis &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h1&gt;&lt;p&gt;安装完成后redis默认的配置文件redis.conf位于 &lt;/p&gt;
&lt;p&gt;/usr/local/etc &lt;/p&gt;
&lt;p&gt;同时，redis-sentinel.conf也在这里。 &lt;/p&gt;
&lt;p&gt;使用cat命令查看redis.conf： &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/etc/redis.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Mac" scheme="http:zhuhaijun.cn/categories/Mac/"/>
    
    
      <category term="mac" scheme="http:zhuhaijun.cn/tags/mac/"/>
    
      <category term="redis" scheme="http:zhuhaijun.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>js utils</title>
    <link href="http:zhuhaijun.cn/2019/06/17/js-utils/"/>
    <id>http:zhuhaijun.cn/2019/06/17/js-utils/</id>
    <published>2019-06-17T07:39:07.000Z</published>
    <updated>2019-06-17T07:41:33.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js-时间戳转时间间隔"><a href="#js-时间戳转时间间隔" class="headerlink" title="js 时间戳转时间间隔"></a>js 时间戳转时间间隔</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间转为时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">date2timestamp</span>(<span class="params">datetime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(datetime));</span><br><span class="line">    timestamp = timestamp.getTime();</span><br><span class="line">    timestamp = timestamp / <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">return</span> timestamp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳转时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timestamp2date</span>(<span class="params">timestamp, mode</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(timestamp) &gt; <span class="number">999999999999</span>)&#123;</span><br><span class="line">        timestamp /= <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tt = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp) * <span class="number">1000</span>).toLocaleString().replace(<span class="regexp">/:\d&#123;1,2&#125;$/</span>, <span class="string">' '</span>).replace(<span class="regexp">/年|月/g</span>, <span class="string">"-"</span>).replace(<span class="regexp">/日/g</span>, <span class="string">" "</span>).replace(<span class="regexp">/上午/g</span>, <span class="string">""</span>).replace(<span class="regexp">/下午/g</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">var</span> date_arr = tt.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mode == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> minute = <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">var</span> hour = minute * <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">var</span> day = hour * <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">var</span> halfamonth = day * <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">var</span> month = day * <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">var</span> current_timestamp = <span class="built_in">parseInt</span>(<span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) / <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">var</span> diffValue = current_timestamp - timestamp;</span><br><span class="line">        <span class="keyword">var</span> monthC = diffValue / month;</span><br><span class="line">        <span class="keyword">var</span> dayC = diffValue / day;</span><br><span class="line">        <span class="keyword">var</span> hourC = diffValue / hour;</span><br><span class="line">        <span class="keyword">var</span> minC = diffValue / minute;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2小时内--&gt; 刚刚</span></span><br><span class="line"><span class="comment">         * 2小时-24小时内  --&gt; *小时前</span></span><br><span class="line"><span class="comment">         * 超过24小时-1月内 --&gt;  **天前</span></span><br><span class="line"><span class="comment">         * 超过1个月-1年内  --&gt;  *月前</span></span><br><span class="line"><span class="comment">         * 超过1年 --&gt;  1年前</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (monthC &gt; <span class="number">12</span>)&#123;</span><br><span class="line">            result = <span class="number">1</span> + <span class="string">"年前"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (monthC &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            result = <span class="built_in">parseInt</span>(monthC) + <span class="string">"月前"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dayC &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            result = <span class="built_in">parseInt</span>(dayC) + <span class="string">"天前"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (hourC &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            result = <span class="built_in">parseInt</span>(hourC) + <span class="string">"小时前"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result = <span class="string">"刚刚"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mode == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> current_timestamp = <span class="built_in">parseInt</span>(<span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) / <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> ((current_timestamp - timestamp) &gt; <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="comment">// 一周之前，显示日期</span></span><br><span class="line">            <span class="keyword">return</span> date_arr[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> date = d.getFullYear() + <span class="string">"/"</span> + (d.getMonth() + <span class="number">1</span>) + <span class="string">"/"</span> + d.getDate();</span><br><span class="line">            <span class="keyword">var</span> b_date = date2timestamp(date + <span class="string">" 00:00:00"</span>);</span><br><span class="line">            <span class="keyword">var</span> e_date = date2timestamp(date + <span class="string">" 23:59:59"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">parseInt</span>(timestamp) &gt; <span class="built_in">parseInt</span>(b_date) &amp;&amp; <span class="built_in">parseInt</span>(timestamp) &lt; <span class="built_in">parseInt</span>(e_date)) &#123;</span><br><span class="line">                <span class="comment">// 今天,只显示时间</span></span><br><span class="line">                <span class="keyword">return</span> date_arr[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">parseInt</span>(timestamp) &gt; <span class="built_in">parseInt</span>(b_date - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>) &amp;&amp; <span class="built_in">parseInt</span>(timestamp) &lt; <span class="built_in">parseInt</span>(e_date - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)) &#123;</span><br><span class="line">                <span class="comment">// 昨天，显示昨天</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"昨天"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 显示周几</span></span><br><span class="line">            <span class="keyword">var</span> days = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"星期日"</span>,<span class="string">"星期一"</span>,<span class="string">"星期二"</span>,<span class="string">"星期三"</span>,<span class="string">"星期四"</span>,<span class="string">"星期五"</span>,<span class="string">"星期六"</span>);</span><br><span class="line">            <span class="keyword">var</span> day  = <span class="keyword">new</span> <span class="built_in">Date</span>(date_arr[<span class="number">0</span>]).getDay();</span><br><span class="line">            <span class="keyword">return</span> days[day];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mode == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是当天，就不显示日期</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> date = d.getFullYear() + <span class="string">"/"</span> + (d.getMonth() + <span class="number">1</span>) + <span class="string">"/"</span> + d.getDate();</span><br><span class="line">        <span class="keyword">var</span> b_date = date2timestamp(date + <span class="string">" 00:00:00"</span>);</span><br><span class="line">        <span class="keyword">var</span> e_date = date2timestamp(date + <span class="string">" 23:59:59"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(timestamp) &gt; <span class="built_in">parseInt</span>(b_date) &amp;&amp; <span class="built_in">parseInt</span>(timestamp) &lt; <span class="built_in">parseInt</span>(e_date)) &#123;</span><br><span class="line">            <span class="keyword">return</span> date_arr[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js-时间戳转时间间隔&quot;&gt;&lt;a href=&quot;#js-时间戳转时间间隔&quot; class=&quot;headerlink&quot; title=&quot;js 时间戳转时间间隔&quot;&gt;&lt;/a&gt;js 时间戳转时间间隔&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="js" scheme="http:zhuhaijun.cn/categories/js/"/>
    
    
      <category term="js" scheme="http:zhuhaijun.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>线程交替打印ABC的多种实现方法</title>
    <link href="http:zhuhaijun.cn/2019/03/14/%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0ABC%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <id>http:zhuhaijun.cn/2019/03/14/线程交替打印ABC的多种实现方法/</id>
    <published>2019-03-14T09:18:18.000Z</published>
    <updated>2019-03-14T09:20:16.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>建立三个线程A、B、C，A线程打印10次字母A，B线程打印10次字母B,C线程打印10次字母C，但是要求三个线程同时运行，并且实现交替打印，即按照ABCABCABC的顺序打印。</p><h1 id="1、Synchronized同步法"><a href="#1、Synchronized同步法" class="headerlink" title="1、Synchronized同步法"></a>1、Synchronized同步法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadABC_Notify</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Object prev;</span><br><span class="line">        <span class="keyword">private</span> Object self;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name, Object prev, Object self)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.self = self;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。</span></span><br><span class="line"><span class="comment">         * 当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。</span></span><br><span class="line"><span class="comment">         * 当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。</span></span><br><span class="line"><span class="comment">         * 从这里可以看出，notify/notifyAll()执行后，并不立即释放锁，而是要等到执行完临界区中代码后，再释放。</span></span><br><span class="line"><span class="comment">         * 所以在实际编程中，我们应该尽量在线程调用notify/notifyAll()后，立即退出临界区。即不要在notify/notifyAll()后面再写一些耗时的代码。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">10</span> ;</span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (prev) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (self)&#123;</span><br><span class="line">                        System.out.println(name);</span><br><span class="line">                        count-- ;</span><br><span class="line">                        self.notifyAll();   <span class="comment">// 唤醒其他线程竞争self锁，注意此时self锁并未立即释放。</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;    <span class="comment">// 如果count==0,表示这是最后一次打印操作，通过notifyAll操作释放对象锁。</span></span><br><span class="line">                            prev.notifyAll();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;              <span class="comment">// 立即释放 prev锁，当前线程休眠，等待唤醒</span></span><br><span class="line">                            prev.wait();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Object a = <span class="keyword">new</span> Object();</span><br><span class="line">        Object b = <span class="keyword">new</span> Object();</span><br><span class="line">        Object c = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        Thread A = <span class="keyword">new</span> MyThread(<span class="string">"A"</span>,c,a);</span><br><span class="line">        Thread B = <span class="keyword">new</span> MyThread(<span class="string">"B"</span>,a,b);</span><br><span class="line">        Thread C = <span class="keyword">new</span> MyThread(<span class="string">"C"</span>,b,c);</span><br><span class="line"></span><br><span class="line">        A.start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        B.start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        C.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、Lock-Condition-法"><a href="#2、Lock-Condition-法" class="headerlink" title="2、Lock Condition 法"></a>2、Lock Condition 法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * private Lock lock = new ReentrantLock();</span></span><br><span class="line"><span class="comment"> * private Condition condition = lock.newCondition();</span></span><br><span class="line"><span class="comment"> * condition.await();//this.wait();</span></span><br><span class="line"><span class="comment"> * condition.signal();//this.notify();</span></span><br><span class="line"><span class="comment"> * condition.signalAll();//this.notifyAll();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadABC_Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Condition A = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Condition B = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Condition C = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">0</span> )&#123;</span><br><span class="line">                        A.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"A"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    B.signal(); <span class="comment">// A执行完唤醒B线程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">1</span> )&#123;</span><br><span class="line">                        B.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"B"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    C.signal();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadC</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">2</span> )&#123;</span><br><span class="line">                        C.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"C"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    A.signal();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ThreadB().start();</span><br><span class="line">        <span class="keyword">new</span> ThreadA().start();</span><br><span class="line">        <span class="keyword">new</span> ThreadC().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、Semaphore法"><a href="#3、Semaphore法" class="headerlink" title="3、Semaphore法"></a>3、Semaphore法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Semaphore又称信号量，是操作系统中的一个概念，在Java并发编程中，信号量控制的是线程并发的数量。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * public Semaphore(int permits);</span></span><br><span class="line"><span class="comment"> * 其中参数permits就是允许同时运行的线程数目;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Semaphore semaphore = new Semaphore(10,true);</span></span><br><span class="line"><span class="comment"> * semaphore.acquire();</span></span><br><span class="line"><span class="comment"> * //do something here</span></span><br><span class="line"><span class="comment"> * semaphore.release();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadABC_Semaphore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore A = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore B = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore C = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    A.acquire();</span><br><span class="line">                    System.out.print(<span class="string">"A"</span>);</span><br><span class="line">                    B.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    B.acquire();</span><br><span class="line">                    System.out.print(<span class="string">"B"</span>);</span><br><span class="line">                    C.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadC</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    C.acquire();</span><br><span class="line">                    System.out.print(<span class="string">"C"</span>);</span><br><span class="line">                    A.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> ThreadA();</span><br><span class="line">        Thread b = <span class="keyword">new</span> ThreadB();</span><br><span class="line">        Thread c = <span class="keyword">new</span> ThreadC();</span><br><span class="line">        a.start();</span><br><span class="line">        c.start();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;建立三个线程A、B、C，A线程打印10次字母A，B线程打印10次字母B,C线程打印10次字母C，但是要求三个线程同时运行，并
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="java 并发 线程" scheme="http:zhuhaijun.cn/tags/java-%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机 IV</title>
    <link href="http:zhuhaijun.cn/2019/01/23/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-IV/"/>
    <id>http:zhuhaijun.cn/2019/01/23/买卖股票的最佳时机-IV/</id>
    <published>2019-01-23T13:22:50.000Z</published>
    <updated>2019-01-23T13:34:05.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1 算法描述"></a>1 算法描述</h1><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定的股票在第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p><p><strong>注意:</strong> 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,4,1], k = 2</span><br><span class="line">输出: 2</span><br><span class="line">解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,6,5,0,3], k = 2</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。</span><br><span class="line">     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</span><br></pre></td></tr></table></figure><h1 id="2-解法"><a href="#2-解法" class="headerlink" title="2 解法"></a>2 解法</h1><p>当k大于等于数组长度一半时, 问题退化为贪心问题此时采用<code>买卖股票的最佳时机 II</code>的贪心方法解决,可以大幅提升时间性能, </p><p>对于其他的k, 可以采用 <code>买卖股票的最佳时机 III</code>的方法来解决, 在III中定义了两次买入和卖出时最大收益的变量, </p><p>在这里就是k组这样的变量, 即问题IV是对问题III的推广, t[i][0]和t[i][1]分别表示第i比交易买入和卖出时各自的最大收益。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (prices != <span class="keyword">null</span> &amp;&amp; prices.length &gt; <span class="number">1</span> &amp;&amp; k &gt; <span class="number">0</span> )&#123;</span><br><span class="line">           <span class="keyword">if</span> (k &gt;= prices.length / <span class="number">2</span> )</span><br><span class="line">               <span class="keyword">return</span> greedy(prices);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//t[i][0]和t[i][1]分别表示第i笔交易买入和卖出时 各自的最大收益</span></span><br><span class="line">           <span class="keyword">int</span>[][] t = <span class="keyword">new</span> <span class="keyword">int</span>[k][<span class="number">2</span>];</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">               t[i][<span class="number">0</span>] = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> p : prices)&#123;</span><br><span class="line">               <span class="comment">//第1次买</span></span><br><span class="line">               t[<span class="number">0</span>][<span class="number">0</span>] = Math.max( t[<span class="number">0</span>][<span class="number">0</span>] , -p);</span><br><span class="line">               t[<span class="number">0</span>][<span class="number">1</span>] = Math.max( t[<span class="number">0</span>][<span class="number">1</span>] , t[<span class="number">0</span>][<span class="number">0</span>] + p);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">int</span> i = <span class="number">1</span> ;</span><br><span class="line">               <span class="keyword">while</span>(i &lt; k )&#123;</span><br><span class="line">                   t[i][<span class="number">0</span>] = Math.max( t[i][<span class="number">0</span>] , t[i-<span class="number">1</span>][<span class="number">1</span>] -p);</span><br><span class="line">                   t[i][<span class="number">1</span>] = Math.max( t[i][<span class="number">1</span>] , t[i][<span class="number">0</span>] + p);</span><br><span class="line"></span><br><span class="line">                   i++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> t[k-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">greedy</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; ++i) &#123;</span><br><span class="line">           <span class="keyword">if</span>(prices[i] &gt; prices[i-<span class="number">1</span>])</span><br><span class="line">               max += prices[i] - prices[i-<span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1 算法描述&quot;&gt;&lt;/a&gt;1 算法描述&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定的股票在第 &lt;em&gt;i&lt;/em&gt; 天的价格。&lt;/
      
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机 III</title>
    <link href="http:zhuhaijun.cn/2019/01/23/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-III/"/>
    <id>http:zhuhaijun.cn/2019/01/23/买卖股票的最佳时机-III/</id>
    <published>2019-01-23T13:22:45.000Z</published>
    <updated>2019-01-23T13:34:07.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1   算法描述"></a>1   算法描述</h1><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定的股票在第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <em>两笔</em> 交易。</p><p><strong>注意:</strong> 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,3,5,0,0,3,1,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。</span><br><span class="line">     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   </span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   </span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1] </span><br><span class="line">输出: 0 </span><br><span class="line">解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h1 id="2-解法"><a href="#2-解法" class="headerlink" title="2 解法"></a>2 解法</h1><p>对于任意一天考虑 2 个变量: buy[times-1]  sell[times-1] 买入时最大收益，卖出时候最大收益</p><p>buy[times-1]: 在该天第 times - 1  次买入股票可获得的最大收益<br>sell[times-1]: 在该天第 times -1 次卖出股票可获得的最大收益</p><p>buy[times]: 在该天第 times 次买入股票可获得的最大收益<br>sell[times]: 在该天第 times 次卖出股票可获得的最大收益</p><p>分别对四个变量进行相应的更新, 最后 一次卖出sell[maxTimes-1] 就是最大<br>收益值(sell[times] &gt;= sell[times-1])</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices != <span class="keyword">null</span> &amp;&amp; prices.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> preBuy = Integer.MIN_VALUE ;</span><br><span class="line">        <span class="keyword">int</span> preSell = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> buy = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sell = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p : prices)&#123;</span><br><span class="line">            <span class="comment">//第1次买</span></span><br><span class="line">            preBuy = Math.max(preBuy, -p);</span><br><span class="line">            preSell = Math.max(preSell, preBuy + p);</span><br><span class="line">            buy = Math.max(buy, preSell - p);</span><br><span class="line">            sell = Math.max(sell, buy + p );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  sell ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1   算法描述&quot;&gt;&lt;/a&gt;1   算法描述&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定的股票在第 &lt;em&gt;i&lt;/em&gt; 天的价
      
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机 II</title>
    <link href="http:zhuhaijun.cn/2019/01/23/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-II/"/>
    <id>http:zhuhaijun.cn/2019/01/23/买卖股票的最佳时机-II/</id>
    <published>2019-01-23T13:22:40.000Z</published>
    <updated>2019-01-23T13:34:09.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1 算法描述"></a>1 算法描述</h1><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（<strong>多次买卖一支股票</strong>）。</p><p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h1 id="2-解法"><a href="#2-解法" class="headerlink" title="2 解法"></a>2 解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt; prices[i - <span class="number">1</span>])</span><br><span class="line">            maxprofit += prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxprofit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1 算法描述&quot;&gt;&lt;/a&gt;1 算法描述&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定股票第 &lt;em&gt;i&lt;/em&gt; 天的价格。&lt;/p&gt;
      
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机I</title>
    <link href="http:zhuhaijun.cn/2019/01/23/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAI/"/>
    <id>http:zhuhaijun.cn/2019/01/23/买卖股票的最佳时机I/</id>
    <published>2019-01-23T04:08:34.000Z</published>
    <updated>2019-01-23T13:25:28.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1 算法描述"></a>1 算法描述</h1><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>如果你最多<strong>只允许完成一笔交易</strong>（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h1 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2 Solution"></a>2 Solution</h1><h2 id="2-1-暴力算法"><a href="#2-1-暴力算法" class="headerlink" title="2.1 暴力算法"></a>2.1 暴力算法</h2><p>时间复杂度：O(n^2)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxProfit = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">if</span> (prices != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; prices.length ; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; prices.length ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prices[j] &gt; prices[i])&#123;</span><br><span class="line">                    maxProfit = Math.max(maxProfit,(prices[j] - prices[i]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxProfit ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-2-动态规划"><a href="#2-2-动态规划" class="headerlink" title="2.2 动态规划"></a>2.2 动态规划</h2><p>前i天的最大收益 = max{前i-1天的最大收益，第i天的价格-前i-1天中的最小价格}<br>时间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态规划 </span></span><br><span class="line"><span class="comment"> * 前i天的最大收益 = max&#123;前i-1天的最大收益，第i天的价格-前i-1天中的最小价格&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (prices.length == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">0</span>,prices[<span class="number">1</span>]-prices[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">int</span> maxProfit =  Math.max(<span class="number">0</span>,prices[<span class="number">1</span>]-prices[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> minPrice = Math.min(prices[<span class="number">0</span>],prices[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; prices.length)&#123;</span><br><span class="line">            maxProfit =  Math.max( maxProfit , prices[i] - minPrice);</span><br><span class="line">            minPrice = Math.min(minPrice,prices[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1 算法描述&quot;&gt;&lt;/a&gt;1 算法描述&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定股票第 &lt;em&gt;i&lt;/em&gt; 天的价格。&lt;/p&gt;
      
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>python制作微信好友照片墙</title>
    <link href="http:zhuhaijun.cn/2018/12/24/python%E5%88%B6%E4%BD%9C%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E7%85%A7%E7%89%87%E5%A2%99/"/>
    <id>http:zhuhaijun.cn/2018/12/24/python制作微信好友照片墙/</id>
    <published>2018-12-24T11:08:52.000Z</published>
    <updated>2018-12-24T11:09:46.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装itchat和pillow库"><a href="#安装itchat和pillow库" class="headerlink" title="安装itchat和pillow库"></a>安装itchat和pillow库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install itchat</span><br><span class="line">sudo pip install pillow</span><br></pre></td></tr></table></figure><h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><p>wechat_head_img.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import itchat</span><br><span class="line">import math</span><br><span class="line">import os</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">itchat.auto_login(hotReload=True)</span><br><span class="line">friends = itchat.get_friends(update=True)</span><br><span class="line"></span><br><span class="line">num = 0</span><br><span class="line"><span class="keyword">if</span> not os.path.exists(<span class="string">"headImg"</span>):</span><br><span class="line">    os.mkdir(<span class="string">"headImg"</span>)</span><br><span class="line"><span class="keyword">for</span> friend  <span class="keyword">in</span> friends:</span><br><span class="line">    img = itchat.get_head_img(userName=friend[<span class="string">"UserName"</span>])</span><br><span class="line">    <span class="keyword">if</span> len(img) == 0:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"skip %d,friend=%s"</span> % (num,friend[<span class="string">"NickName"</span>]) )</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%d,friend=%s"</span> % (num,friend[<span class="string">"NickName"</span>]))</span><br><span class="line">    fileImage = open(<span class="string">'headImg'</span> + <span class="string">"/"</span> + str(num) + <span class="string">".jpg"</span>,<span class="string">'web'</span>)</span><br><span class="line">    fileImage.write(img)</span><br><span class="line">    fileImage.close()</span><br><span class="line">    num += 1</span><br><span class="line"></span><br><span class="line">all_image = os.listdir(<span class="string">'headImg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"There %d images"</span> % len(all_image))</span><br><span class="line">each_size = int(math.sqrt(<span class="built_in">float</span>(640*640)/len(all_image)))</span><br><span class="line">lines = int(640 / each_size)</span><br><span class="line">image = Image.new(<span class="string">'RGBA'</span>,(640,640))</span><br><span class="line">x = 0</span><br><span class="line">y = 0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(all_image)):</span><br><span class="line">    imagePath = <span class="string">'headImg'</span>+<span class="string">"/"</span>+str(i) + <span class="string">".jpg"</span></span><br><span class="line">    <span class="keyword">if</span> not os.path.isfile(imagePath):</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    img = Image.open(imagePath)</span><br><span class="line">    img = img.resize((each_size,each_size),Image.ANTIALIAS)</span><br><span class="line">    image.paste( img , (x*each_size,y*each_size) )</span><br><span class="line">    x += 1</span><br><span class="line">    <span class="keyword">if</span> x == lines:</span><br><span class="line">        x = 0</span><br><span class="line">        y += 1</span><br><span class="line"></span><br><span class="line">image = image.convert(<span class="string">'RGB'</span>)</span><br><span class="line">image.save(<span class="string">'headImg'</span>+<span class="string">"/"</span>+<span class="string">"all.jpg"</span>)</span><br><span class="line">itchat.send_image(<span class="string">'headImg'</span>+<span class="string">"/"</span>+<span class="string">"all.jpg"</span> , <span class="string">'filehelper'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="直接执行"><a href="#直接执行" class="headerlink" title="直接执行"></a>直接执行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">sudo chmod +x wechat_head_img.py</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">python wechat_head_img.py</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装itchat和pillow库&quot;&gt;&lt;a href=&quot;#安装itchat和pillow库&quot; class=&quot;headerlink&quot; title=&quot;安装itchat和pillow库&quot;&gt;&lt;/a&gt;安装itchat和pillow库&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
      <category term="wechat" scheme="http:zhuhaijun.cn/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>python实现微信机器人AI智能回复</title>
    <link href="http:zhuhaijun.cn/2018/12/24/python%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BAAI%E6%99%BA%E8%83%BD%E5%9B%9E%E5%A4%8D/"/>
    <id>http:zhuhaijun.cn/2018/12/24/python实现微信机器人AI智能回复/</id>
    <published>2018-12-24T11:08:06.000Z</published>
    <updated>2018-12-24T11:24:57.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册图灵机器人网站的账号"><a href="#注册图灵机器人网站的账号" class="headerlink" title="注册图灵机器人网站的账号"></a>注册图灵机器人网站的账号</h1><p>链接：<a href="http://www.tuling123.com/" target="_blank" rel="noopener">http://www.tuling123.com/</a><br>你可以获取自己的图灵机器人apikey</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import itchat</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def get_response(_info):</span><br><span class="line">    <span class="built_in">print</span>(_info)</span><br><span class="line">    api_url = <span class="string">'http://www.tuling123.com/openapi/api'</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'key'</span>: <span class="string">'your_tuling_apikey'</span>, <span class="comment"># 上一步注册的apikey</span></span><br><span class="line">        <span class="string">'info'</span>: _info,</span><br><span class="line">        <span class="string">'userid'</span>: <span class="string">'robot'</span>,          <span class="comment"># 随意填</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(api_url, data=data).json()</span><br><span class="line">    <span class="built_in">print</span>(r.get(<span class="string">'text'</span>))</span><br><span class="line">    <span class="built_in">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@itchat.msg_register(itchat.content.TEXT)</span><br><span class="line">def text_reply(msg):</span><br><span class="line">    <span class="built_in">return</span> r<span class="string">"[Bao]"</span> + get_response(msg[<span class="string">"Text"</span>])[<span class="string">"text"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"start"</span>)</span><br><span class="line">    itchat.auto_login(hotReload=True)</span><br><span class="line">    itchat.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注册图灵机器人网站的账号&quot;&gt;&lt;a href=&quot;#注册图灵机器人网站的账号&quot; class=&quot;headerlink&quot; title=&quot;注册图灵机器人网站的账号&quot;&gt;&lt;/a&gt;注册图灵机器人网站的账号&lt;/h1&gt;&lt;p&gt;链接：&lt;a href=&quot;http://www.tuling1
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
      <category term="wechat" scheme="http:zhuhaijun.cn/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>Mac teminal ssh 免密码</title>
    <link href="http:zhuhaijun.cn/2018/12/21/Mac-teminal-ssh-%E5%85%8D%E5%AF%86%E7%A0%81/"/>
    <id>http:zhuhaijun.cn/2018/12/21/Mac-teminal-ssh-免密码/</id>
    <published>2018-12-21T11:13:16.000Z</published>
    <updated>2018-12-21T11:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、创建expect脚本"><a href="#一、创建expect脚本" class="headerlink" title="一、创建expect脚本"></a>一、创建expect脚本</h1><ol><li><p>在/usr/local/bin目录下创建item2ssh.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 15</span><br><span class="line"><span class="built_in">set</span> port [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> username [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> host [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> passwd [lindex <span class="variable">$argv</span> 3]</span><br><span class="line">spawn ssh -p <span class="variable">$port</span> <span class="variable">$username</span>@<span class="variable">$host</span></span><br><span class="line">expect &#123;</span><br><span class="line">        <span class="string">"(yes/no)?"</span></span><br><span class="line">        &#123;send <span class="string">"yes\n"</span>;exp_continue&#125;</span><br><span class="line">        <span class="string">"password:"</span></span><br><span class="line">        &#123;send <span class="string">"<span class="variable">$passwd</span>\n"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure></li><li><p>赋予可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod +x item2ssh.sh</span><br></pre></td></tr></table></figure></li></ol><h1 id="二、创建alias"><a href="#二、创建alias" class="headerlink" title="二、创建alias"></a>二、创建alias</h1><ol start="3"><li><p>创建alias<br>在~目录下，创建.bash_alies文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ssh2std=<span class="string">'item2login.sh 22 username ip passwd'</span></span><br></pre></td></tr></table></figure></li><li><p>修改.bash_profile<br>添加以下几行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bash_aliases ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">source</span> ~/.bash_aliases</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><p>5.source使之生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>这样以后，直接敲ssd2std 就可以免密码ssh登录到std机器上了。</p><h1 id="三、item2中使用"><a href="#三、item2中使用" class="headerlink" title="三、item2中使用"></a>三、item2中使用</h1><p>在item2软件中，<code>comand</code>+<code>,</code> 弹出Preferences，<br>然后可以添加Profiles,如下图所示<br><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/item2.jpg" alt="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/item2.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、创建expect脚本&quot;&gt;&lt;a href=&quot;#一、创建expect脚本&quot; class=&quot;headerlink&quot; title=&quot;一、创建expect脚本&quot;&gt;&lt;/a&gt;一、创建expect脚本&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在/usr/local/bin目录下创建i
      
    
    </summary>
    
      <category term="Mac" scheme="http:zhuhaijun.cn/categories/Mac/"/>
    
    
      <category term="mac" scheme="http:zhuhaijun.cn/tags/mac/"/>
    
      <category term="ssh" scheme="http:zhuhaijun.cn/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>MAC使用nginx分发80至8080端口</title>
    <link href="http:zhuhaijun.cn/2018/12/21/MAC%E4%BD%BF%E7%94%A8nginx%E5%88%86%E5%8F%9180%E8%87%B38080%E7%AB%AF%E5%8F%A3/"/>
    <id>http:zhuhaijun.cn/2018/12/21/MAC使用nginx分发80至8080端口/</id>
    <published>2018-12-21T11:13:03.000Z</published>
    <updated>2018-12-21T11:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、使用背景"><a href="#1、使用背景" class="headerlink" title="1、使用背景"></a>1、使用背景</h1><p>由于项目必须要启动80端口，但是mac系统中非root用户无法直接使用1024以下的端口</p><h1 id="2、释放apache的80端口"><a href="#2、释放apache的80端口" class="headerlink" title="2、释放apache的80端口"></a>2、释放apache的80端口</h1><p>由于Mac OS是自带Apache服务的，它本身占用了80端口，首先你需要将Apache的监听端口改为其他端口或者将其直接卸载，我选用的是将其端口改为8011<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apache2/httpd.conf</span><br></pre></td></tr></table></figure></p><p>Listen 8011</p><p>改动后，重启生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/apachectl restart</span><br></pre></td></tr></table></figure></p><p>到这里，你已经释放了80端口</p><h1 id="3、使用Nginx分发80端口到8080端口"><a href="#3、使用Nginx分发80端口到8080端口" class="headerlink" title="3、使用Nginx分发80端口到8080端口"></a>3、使用Nginx分发80端口到8080端口</h1><ol start="0"><li>安装brew</li></ol><p>见官网：<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">https://brew.sh/index_zh-cn.html</a></p><ol><li><p>使用Homebrew安装库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew search nginx</span><br><span class="line">brew install nginx</span><br></pre></td></tr></table></figure></li><li><p>安装好了后，修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost l.sogou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location ~* ^/h5/&#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8091;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* ^/weixin/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8093;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* ^/api/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8087;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page             /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server下的结点：<br>listen：监听80端口<br>server_name：转发到哪个地址<br>proxy_pass：代理到哪个地址</p><ol start="3"><li>Nginx开机启动</li></ol><p>你需要了解的就是plist文件。plist就是property list format的意思，是苹果用来保存应用数据的格式，其实就是个xml。<br>可以在/usr/local/opt/nginx 下找到nginx对应的plist文件，比如在作者电脑上是 homebrew.mxcl.nginx.plist 。</p><p>需要把这个文件复制到 /Library/LaunchDaemons 下，系统启动时启动。<br>也可以复制到 /Library/LaunchAgents下，在用户登录时启动。<br>接着执行launchctl load -w，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/<span class="built_in">local</span>/opt/nginx/*.plist /Library/LaunchDaemons</span><br><span class="line"></span><br><span class="line">sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure><p>最后，重启你的机器，你会发现nginx在80端口启动了，试着通过<a href="http://localhost直接访问" target="_blank" rel="noopener">http://localhost直接访问</a></p><ol start="4"><li>修改配置 重启生效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/opt/nginx/bin/</span><br><span class="line">sudo ./nginx -s reload</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、使用背景&quot;&gt;&lt;a href=&quot;#1、使用背景&quot; class=&quot;headerlink&quot; title=&quot;1、使用背景&quot;&gt;&lt;/a&gt;1、使用背景&lt;/h1&gt;&lt;p&gt;由于项目必须要启动80端口，但是mac系统中非root用户无法直接使用1024以下的端口&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
      <category term="Mac" scheme="http:zhuhaijun.cn/categories/Mac/"/>
    
    
      <category term="mac" scheme="http:zhuhaijun.cn/tags/mac/"/>
    
      <category term="nginx" scheme="http:zhuhaijun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http:zhuhaijun.cn/2018/12/19/hello-world/"/>
    <id>http:zhuhaijun.cn/2018/12/19/hello-world/</id>
    <published>2018-12-19T05:17:36.000Z</published>
    <updated>2018-12-19T05:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java字节码分析工具classpy</title>
    <link href="http:zhuhaijun.cn/2018/12/05/classpy/"/>
    <id>http:zhuhaijun.cn/2018/12/05/classpy/</id>
    <published>2018-12-05T09:10:04.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节码分析工具classpy"><a href="#字节码分析工具classpy" class="headerlink" title="字节码分析工具classpy"></a>字节码分析工具classpy</h1><p>这个开源工具的地址: <a href="https://github.com/zxh0/classpy" target="_blank" rel="noopener">https://github.com/zxh0/classpy</a></p><ol><li>classpy环境依赖下载地址上有说明，首先保证你的环境里配置了gradle</li><li>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:zxh0/classpy.git 下载工具</li><li>进入到classpy目录下执行命令<br>3.1. 编译：gradle uberjar<br>4.2. 启动：gradle run</li></ol><p>经过以上两步就可以打开classpy界面，再打开一个class文件，如下所示</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/classpy.png" alt="classpy" title="classpy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字节码分析工具classpy&quot;&gt;&lt;a href=&quot;#字节码分析工具classpy&quot; class=&quot;headerlink&quot; title=&quot;字节码分析工具classpy&quot;&gt;&lt;/a&gt;字节码分析工具classpy&lt;/h1&gt;&lt;p&gt;这个开源工具的地址: &lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="jvm" scheme="http:zhuhaijun.cn/tags/jvm/"/>
    
      <category term="classpy" scheme="http:zhuhaijun.cn/tags/classpy/"/>
    
  </entry>
  
  <entry>
    <title>install go</title>
    <link href="http:zhuhaijun.cn/2018/11/06/install-go/"/>
    <id>http:zhuhaijun.cn/2018/11/06/install-go/</id>
    <published>2018-11-06T11:56:00.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h1><ol><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压到/usr/local目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -C /usr/<span class="built_in">local</span> -zxf go1.11.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>加入环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure></li></ol><h1 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h1><p>1、下载<a href="https://studygolang.com/dl" target="_blank" rel="noopener">https://studygolang.com/dl</a><br>2、双击安装<br>3、默认情况下.msi文件会安装在 c:\Go 目录下。你可以将 c:\Go\bin 目录添加到 PATH 环境变量中。添加后你需要重启命令窗口才能生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-下安装&quot;&gt;&lt;a href=&quot;#Linux-下安装&quot; class=&quot;headerlink&quot; title=&quot;Linux 下安装&quot;&gt;&lt;/a&gt;Linux 下安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载&lt;/p&gt;
&lt;figure class=&quot;highlight b
      
    
    </summary>
    
      <category term="go" scheme="http:zhuhaijun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http:zhuhaijun.cn/tags/go/"/>
    
      <category term="install" scheme="http:zhuhaijun.cn/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>windows cmdpython交互模式下cp65001异常</title>
    <link href="http:zhuhaijun.cn/2018/11/01/windows%20cmd%20python%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F%E4%B8%8Bcp65001%E5%BC%82%E5%B8%B8/"/>
    <id>http:zhuhaijun.cn/2018/11/01/windows cmd python交互模式下cp65001异常/</id>
    <published>2018-11-01T08:11:39.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>python安装后进入命令行交互模式，输入任何代码都报 <code>unknown encoding: cp65001</code>异常</p><p>需要将编码(UTF-8)修改为 简体中文(GBK)</p><p>在CMD窗口执行　<code>chcp 936</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python安装后进入命令行交互模式，输入任何代码都报 &lt;code&gt;unknown encoding: cp65001&lt;/code&gt;异常&lt;/p&gt;
&lt;p&gt;需要将编码(UTF-8)修改为 简体中文(GBK)&lt;/p&gt;
&lt;p&gt;在CMD窗口执行　&lt;code&gt;chcp 936&lt;/cod
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 快捷键与 Eclipse 对比</title>
    <link href="http:zhuhaijun.cn/2018/11/01/IntelliJ-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http:zhuhaijun.cn/2018/11/01/IntelliJ-IDEA-快捷键/</id>
    <published>2018-11-01T06:14:06.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>IntelliJ IDEA快捷键:</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/idea%20keymap.png" alt="IntelliJ IDEA快捷键" title="IntelliJ IDEA快捷键"></p><p>Eclipse vs IDEA快捷键:</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/eclipse%20vs%20%20idea.png" alt="Eclipse vs IDEA快捷键" title="Eclipse vs IDEA快捷键"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IntelliJ IDEA快捷键:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/idea%20keymap.png&quot; alt=&quot;Int
      
    
    </summary>
    
      <category term="tool" scheme="http:zhuhaijun.cn/categories/tool/"/>
    
    
      <category term="idea" scheme="http:zhuhaijun.cn/tags/idea/"/>
    
      <category term="tool" scheme="http:zhuhaijun.cn/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>用python写的一个简易的Http服务器</title>
    <link href="http:zhuhaijun.cn/2018/11/01/httpServer-by-python/"/>
    <id>http:zhuhaijun.cn/2018/11/01/httpServer-by-python/</id>
    <published>2018-11-01T03:37:30.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在看《Http权威指南》的时候，看到里面用Perl实现了一个最简单的Http的服务器。<br>于是我参考着里面的逻辑写了一个python版本的。</p><ol><li>创建服务器套接字（socket），把地址绑定到套接字上，并监听连接</li><li>服务器无限循环，接受客户端连接</li><li>客户端连接进来后，读取客户端发送的消息，并且打印Http请求报文</li><li>返回Http的响应报文</li></ol><p>运行以下的python脚本后，使用浏览器访问<a href="http://localhost:8080/即可。" target="_blank" rel="noopener">http://localhost:8080/即可。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">8080</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST,PORT)</span><br><span class="line"></span><br><span class="line">tcpSerSock = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcpSerSock.bind(ADDR)</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">responseStr = <span class="string">'''</span></span><br><span class="line"><span class="string">HTTP/1.0 200 OK</span></span><br><span class="line"><span class="string">Connection:close</span></span><br><span class="line"><span class="string">Content-type;text:plain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Hi there!</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'waiting for connection ...'</span></span><br><span class="line">    tcpCliSock , addr = tcpSerSock.accept()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'...connected from:'</span>,addr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = tcpCliSock.recv(BUFSIZE)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line">        tcpCliSock.send(responseStr)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tcpCliSock.close()</span><br><span class="line"></span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在看《Http权威指南》的时候，看到里面用Perl实现了一个最简单的Http的服务器。&lt;br&gt;于是我参考着里面的逻辑写了一个python版本的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建服务器套接字（socket），把地址绑定到套接字上，并监听连接&lt;/li&gt;
&lt;li&gt;服务器无限循
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="http" scheme="http:zhuhaijun.cn/tags/http/"/>
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>万圣节</title>
    <link href="http:zhuhaijun.cn/2018/11/01/%E4%B8%87%E5%9C%A3%E8%8A%82/"/>
    <id>http:zhuhaijun.cn/2018/11/01/万圣节/</id>
    <published>2018-10-31T16:00:07.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="万圣节"><a href="#万圣节" class="headerlink" title="万圣节"></a>万圣节</h1><p>今天是万圣节，11月1日，又是新的一个月的来临。</p><p>最近的一段时间过得很开心。</p><p>以后还是得继续更新日志才好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;万圣节&quot;&gt;&lt;a href=&quot;#万圣节&quot; class=&quot;headerlink&quot; title=&quot;万圣节&quot;&gt;&lt;/a&gt;万圣节&lt;/h1&gt;&lt;p&gt;今天是万圣节，11月1日，又是新的一个月的来临。&lt;/p&gt;
&lt;p&gt;最近的一段时间过得很开心。&lt;/p&gt;
&lt;p&gt;以后还是得继续更新日志才好
      
    
    </summary>
    
      <category term="随笔" scheme="http:zhuhaijun.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http:zhuhaijun.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
