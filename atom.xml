<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m somebody</title>
  
  <subtitle>任重而道远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http:zhuhaijun.cn/"/>
  <updated>2019-03-14T09:20:16.204Z</updated>
  <id>http:zhuhaijun.cn/</id>
  
  <author>
    <name>Zhu Haijun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程交替打印ABC的多种实现方法</title>
    <link href="http:zhuhaijun.cn/2019/03/14/%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0ABC%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <id>http:zhuhaijun.cn/2019/03/14/线程交替打印ABC的多种实现方法/</id>
    <published>2019-03-14T09:18:18.000Z</published>
    <updated>2019-03-14T09:20:16.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>建立三个线程A、B、C，A线程打印10次字母A，B线程打印10次字母B,C线程打印10次字母C，但是要求三个线程同时运行，并且实现交替打印，即按照ABCABCABC的顺序打印。</p><h1 id="1、Synchronized同步法"><a href="#1、Synchronized同步法" class="headerlink" title="1、Synchronized同步法"></a>1、Synchronized同步法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadABC_Notify</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Object prev;</span><br><span class="line">        <span class="keyword">private</span> Object self;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name, Object prev, Object self)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.self = self;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * wait() 与 notify/notifyAll() 是Object类的方法，在执行两个方法时，要先获得锁。</span></span><br><span class="line"><span class="comment">         * 当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。</span></span><br><span class="line"><span class="comment">         * 当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。</span></span><br><span class="line"><span class="comment">         * 从这里可以看出，notify/notifyAll()执行后，并不立即释放锁，而是要等到执行完临界区中代码后，再释放。</span></span><br><span class="line"><span class="comment">         * 所以在实际编程中，我们应该尽量在线程调用notify/notifyAll()后，立即退出临界区。即不要在notify/notifyAll()后面再写一些耗时的代码。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">10</span> ;</span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (prev) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (self)&#123;</span><br><span class="line">                        System.out.println(name);</span><br><span class="line">                        count-- ;</span><br><span class="line">                        self.notifyAll();   <span class="comment">// 唤醒其他线程竞争self锁，注意此时self锁并未立即释放。</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;    <span class="comment">// 如果count==0,表示这是最后一次打印操作，通过notifyAll操作释放对象锁。</span></span><br><span class="line">                            prev.notifyAll();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;              <span class="comment">// 立即释放 prev锁，当前线程休眠，等待唤醒</span></span><br><span class="line">                            prev.wait();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Object a = <span class="keyword">new</span> Object();</span><br><span class="line">        Object b = <span class="keyword">new</span> Object();</span><br><span class="line">        Object c = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        Thread A = <span class="keyword">new</span> MyThread(<span class="string">"A"</span>,c,a);</span><br><span class="line">        Thread B = <span class="keyword">new</span> MyThread(<span class="string">"B"</span>,a,b);</span><br><span class="line">        Thread C = <span class="keyword">new</span> MyThread(<span class="string">"C"</span>,b,c);</span><br><span class="line"></span><br><span class="line">        A.start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        B.start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        C.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、Lock-Condition-法"><a href="#2、Lock-Condition-法" class="headerlink" title="2、Lock Condition 法"></a>2、Lock Condition 法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * private Lock lock = new ReentrantLock();</span></span><br><span class="line"><span class="comment"> * private Condition condition = lock.newCondition();</span></span><br><span class="line"><span class="comment"> * condition.await();//this.wait();</span></span><br><span class="line"><span class="comment"> * condition.signal();//this.notify();</span></span><br><span class="line"><span class="comment"> * condition.signalAll();//this.notifyAll();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadABC_Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Condition A = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Condition B = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Condition C = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">0</span> )&#123;</span><br><span class="line">                        A.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"A"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    B.signal(); <span class="comment">// A执行完唤醒B线程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">1</span> )&#123;</span><br><span class="line">                        B.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"B"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    C.signal();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadC</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">2</span> )&#123;</span><br><span class="line">                        C.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(<span class="string">"C"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    A.signal();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ThreadB().start();</span><br><span class="line">        <span class="keyword">new</span> ThreadA().start();</span><br><span class="line">        <span class="keyword">new</span> ThreadC().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、Semaphore法"><a href="#3、Semaphore法" class="headerlink" title="3、Semaphore法"></a>3、Semaphore法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Semaphore又称信号量，是操作系统中的一个概念，在Java并发编程中，信号量控制的是线程并发的数量。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * public Semaphore(int permits);</span></span><br><span class="line"><span class="comment"> * 其中参数permits就是允许同时运行的线程数目;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Semaphore semaphore = new Semaphore(10,true);</span></span><br><span class="line"><span class="comment"> * semaphore.acquire();</span></span><br><span class="line"><span class="comment"> * //do something here</span></span><br><span class="line"><span class="comment"> * semaphore.release();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadABC_Semaphore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore A = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore B = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore C = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    A.acquire();</span><br><span class="line">                    System.out.print(<span class="string">"A"</span>);</span><br><span class="line">                    B.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    B.acquire();</span><br><span class="line">                    System.out.print(<span class="string">"B"</span>);</span><br><span class="line">                    C.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadC</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    C.acquire();</span><br><span class="line">                    System.out.print(<span class="string">"C"</span>);</span><br><span class="line">                    A.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> ThreadA();</span><br><span class="line">        Thread b = <span class="keyword">new</span> ThreadB();</span><br><span class="line">        Thread c = <span class="keyword">new</span> ThreadC();</span><br><span class="line">        a.start();</span><br><span class="line">        c.start();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;建立三个线程A、B、C，A线程打印10次字母A，B线程打印10次字母B,C线程打印10次字母C，但是要求三个线程同时运行，并
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="java 并发 线程" scheme="http:zhuhaijun.cn/tags/java-%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机 IV</title>
    <link href="http:zhuhaijun.cn/2019/01/23/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-IV/"/>
    <id>http:zhuhaijun.cn/2019/01/23/买卖股票的最佳时机-IV/</id>
    <published>2019-01-23T13:22:50.000Z</published>
    <updated>2019-01-23T13:34:05.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1 算法描述"></a>1 算法描述</h1><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定的股票在第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p><p><strong>注意:</strong> 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,4,1], k = 2</span><br><span class="line">输出: 2</span><br><span class="line">解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,6,5,0,3], k = 2</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。</span><br><span class="line">     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</span><br></pre></td></tr></table></figure><h1 id="2-解法"><a href="#2-解法" class="headerlink" title="2 解法"></a>2 解法</h1><p>当k大于等于数组长度一半时, 问题退化为贪心问题此时采用<code>买卖股票的最佳时机 II</code>的贪心方法解决,可以大幅提升时间性能, </p><p>对于其他的k, 可以采用 <code>买卖股票的最佳时机 III</code>的方法来解决, 在III中定义了两次买入和卖出时最大收益的变量, </p><p>在这里就是k组这样的变量, 即问题IV是对问题III的推广, t[i][0]和t[i][1]分别表示第i比交易买入和卖出时各自的最大收益。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (prices != <span class="keyword">null</span> &amp;&amp; prices.length &gt; <span class="number">1</span> &amp;&amp; k &gt; <span class="number">0</span> )&#123;</span><br><span class="line">           <span class="keyword">if</span> (k &gt;= prices.length / <span class="number">2</span> )</span><br><span class="line">               <span class="keyword">return</span> greedy(prices);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//t[i][0]和t[i][1]分别表示第i笔交易买入和卖出时 各自的最大收益</span></span><br><span class="line">           <span class="keyword">int</span>[][] t = <span class="keyword">new</span> <span class="keyword">int</span>[k][<span class="number">2</span>];</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">               t[i][<span class="number">0</span>] = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> p : prices)&#123;</span><br><span class="line">               <span class="comment">//第1次买</span></span><br><span class="line">               t[<span class="number">0</span>][<span class="number">0</span>] = Math.max( t[<span class="number">0</span>][<span class="number">0</span>] , -p);</span><br><span class="line">               t[<span class="number">0</span>][<span class="number">1</span>] = Math.max( t[<span class="number">0</span>][<span class="number">1</span>] , t[<span class="number">0</span>][<span class="number">0</span>] + p);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">int</span> i = <span class="number">1</span> ;</span><br><span class="line">               <span class="keyword">while</span>(i &lt; k )&#123;</span><br><span class="line">                   t[i][<span class="number">0</span>] = Math.max( t[i][<span class="number">0</span>] , t[i-<span class="number">1</span>][<span class="number">1</span>] -p);</span><br><span class="line">                   t[i][<span class="number">1</span>] = Math.max( t[i][<span class="number">1</span>] , t[i][<span class="number">0</span>] + p);</span><br><span class="line"></span><br><span class="line">                   i++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> t[k-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">greedy</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; ++i) &#123;</span><br><span class="line">           <span class="keyword">if</span>(prices[i] &gt; prices[i-<span class="number">1</span>])</span><br><span class="line">               max += prices[i] - prices[i-<span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1 算法描述&quot;&gt;&lt;/a&gt;1 算法描述&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定的股票在第 &lt;em&gt;i&lt;/em&gt; 天的价格。&lt;/
      
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机 III</title>
    <link href="http:zhuhaijun.cn/2019/01/23/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-III/"/>
    <id>http:zhuhaijun.cn/2019/01/23/买卖股票的最佳时机-III/</id>
    <published>2019-01-23T13:22:45.000Z</published>
    <updated>2019-01-23T13:34:07.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1   算法描述"></a>1   算法描述</h1><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定的股票在第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <em>两笔</em> 交易。</p><p><strong>注意:</strong> 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,3,5,0,0,3,1,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。</span><br><span class="line">     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   </span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   </span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1] </span><br><span class="line">输出: 0 </span><br><span class="line">解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h1 id="2-解法"><a href="#2-解法" class="headerlink" title="2 解法"></a>2 解法</h1><p>对于任意一天考虑 2 个变量: buy[times-1]  sell[times-1] 买入时最大收益，卖出时候最大收益</p><p>buy[times-1]: 在该天第 times - 1  次买入股票可获得的最大收益<br>sell[times-1]: 在该天第 times -1 次卖出股票可获得的最大收益</p><p>buy[times]: 在该天第 times 次买入股票可获得的最大收益<br>sell[times]: 在该天第 times 次卖出股票可获得的最大收益</p><p>分别对四个变量进行相应的更新, 最后 一次卖出sell[maxTimes-1] 就是最大<br>收益值(sell[times] &gt;= sell[times-1])</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices != <span class="keyword">null</span> &amp;&amp; prices.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> preBuy = Integer.MIN_VALUE ;</span><br><span class="line">        <span class="keyword">int</span> preSell = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> buy = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sell = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p : prices)&#123;</span><br><span class="line">            <span class="comment">//第1次买</span></span><br><span class="line">            preBuy = Math.max(preBuy, -p);</span><br><span class="line">            preSell = Math.max(preSell, preBuy + p);</span><br><span class="line">            buy = Math.max(buy, preSell - p);</span><br><span class="line">            sell = Math.max(sell, buy + p );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  sell ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1   算法描述&quot;&gt;&lt;/a&gt;1   算法描述&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定的股票在第 &lt;em&gt;i&lt;/em&gt; 天的价
      
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机 II</title>
    <link href="http:zhuhaijun.cn/2019/01/23/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-II/"/>
    <id>http:zhuhaijun.cn/2019/01/23/买卖股票的最佳时机-II/</id>
    <published>2019-01-23T13:22:40.000Z</published>
    <updated>2019-01-23T13:34:09.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1 算法描述"></a>1 算法描述</h1><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（<strong>多次买卖一支股票</strong>）。</p><p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h1 id="2-解法"><a href="#2-解法" class="headerlink" title="2 解法"></a>2 解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt; prices[i - <span class="number">1</span>])</span><br><span class="line">            maxprofit += prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxprofit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1 算法描述&quot;&gt;&lt;/a&gt;1 算法描述&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定股票第 &lt;em&gt;i&lt;/em&gt; 天的价格。&lt;/p&gt;
      
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>买卖股票的最佳时机I</title>
    <link href="http:zhuhaijun.cn/2019/01/23/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAI/"/>
    <id>http:zhuhaijun.cn/2019/01/23/买卖股票的最佳时机I/</id>
    <published>2019-01-23T04:08:34.000Z</published>
    <updated>2019-01-23T13:25:28.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1 算法描述"></a>1 算法描述</h1><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>如果你最多<strong>只允许完成一笔交易</strong>（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h1 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2 Solution"></a>2 Solution</h1><h2 id="2-1-暴力算法"><a href="#2-1-暴力算法" class="headerlink" title="2.1 暴力算法"></a>2.1 暴力算法</h2><p>时间复杂度：O(n^2)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxProfit = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">if</span> (prices != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; prices.length ; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; prices.length ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prices[j] &gt; prices[i])&#123;</span><br><span class="line">                    maxProfit = Math.max(maxProfit,(prices[j] - prices[i]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxProfit ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-2-动态规划"><a href="#2-2-动态规划" class="headerlink" title="2.2 动态规划"></a>2.2 动态规划</h2><p>前i天的最大收益 = max{前i-1天的最大收益，第i天的价格-前i-1天中的最小价格}<br>时间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态规划 </span></span><br><span class="line"><span class="comment"> * 前i天的最大收益 = max&#123;前i-1天的最大收益，第i天的价格-前i-1天中的最小价格&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (prices.length == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">0</span>,prices[<span class="number">1</span>]-prices[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">int</span> maxProfit =  Math.max(<span class="number">0</span>,prices[<span class="number">1</span>]-prices[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> minPrice = Math.min(prices[<span class="number">0</span>],prices[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; prices.length)&#123;</span><br><span class="line">            maxProfit =  Math.max( maxProfit , prices[i] - minPrice);</span><br><span class="line">            minPrice = Math.min(minPrice,prices[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-算法描述&quot;&gt;&lt;a href=&quot;#1-算法描述&quot; class=&quot;headerlink&quot; title=&quot;1 算法描述&quot;&gt;&lt;/a&gt;1 算法描述&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定股票第 &lt;em&gt;i&lt;/em&gt; 天的价格。&lt;/p&gt;
      
    
    </summary>
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http:zhuhaijun.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>python制作微信好友照片墙</title>
    <link href="http:zhuhaijun.cn/2018/12/24/python%E5%88%B6%E4%BD%9C%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E7%85%A7%E7%89%87%E5%A2%99/"/>
    <id>http:zhuhaijun.cn/2018/12/24/python制作微信好友照片墙/</id>
    <published>2018-12-24T11:08:52.000Z</published>
    <updated>2018-12-24T11:09:46.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装itchat和pillow库"><a href="#安装itchat和pillow库" class="headerlink" title="安装itchat和pillow库"></a>安装itchat和pillow库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install itchat</span><br><span class="line">sudo pip install pillow</span><br></pre></td></tr></table></figure><h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><p>wechat_head_img.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import itchat</span><br><span class="line">import math</span><br><span class="line">import os</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">itchat.auto_login(hotReload=True)</span><br><span class="line">friends = itchat.get_friends(update=True)</span><br><span class="line"></span><br><span class="line">num = 0</span><br><span class="line"><span class="keyword">if</span> not os.path.exists(<span class="string">"headImg"</span>):</span><br><span class="line">    os.mkdir(<span class="string">"headImg"</span>)</span><br><span class="line"><span class="keyword">for</span> friend  <span class="keyword">in</span> friends:</span><br><span class="line">    img = itchat.get_head_img(userName=friend[<span class="string">"UserName"</span>])</span><br><span class="line">    <span class="keyword">if</span> len(img) == 0:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"skip %d,friend=%s"</span> % (num,friend[<span class="string">"NickName"</span>]) )</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%d,friend=%s"</span> % (num,friend[<span class="string">"NickName"</span>]))</span><br><span class="line">    fileImage = open(<span class="string">'headImg'</span> + <span class="string">"/"</span> + str(num) + <span class="string">".jpg"</span>,<span class="string">'web'</span>)</span><br><span class="line">    fileImage.write(img)</span><br><span class="line">    fileImage.close()</span><br><span class="line">    num += 1</span><br><span class="line"></span><br><span class="line">all_image = os.listdir(<span class="string">'headImg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"There %d images"</span> % len(all_image))</span><br><span class="line">each_size = int(math.sqrt(<span class="built_in">float</span>(640*640)/len(all_image)))</span><br><span class="line">lines = int(640 / each_size)</span><br><span class="line">image = Image.new(<span class="string">'RGBA'</span>,(640,640))</span><br><span class="line">x = 0</span><br><span class="line">y = 0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(all_image)):</span><br><span class="line">    imagePath = <span class="string">'headImg'</span>+<span class="string">"/"</span>+str(i) + <span class="string">".jpg"</span></span><br><span class="line">    <span class="keyword">if</span> not os.path.isfile(imagePath):</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    img = Image.open(imagePath)</span><br><span class="line">    img = img.resize((each_size,each_size),Image.ANTIALIAS)</span><br><span class="line">    image.paste( img , (x*each_size,y*each_size) )</span><br><span class="line">    x += 1</span><br><span class="line">    <span class="keyword">if</span> x == lines:</span><br><span class="line">        x = 0</span><br><span class="line">        y += 1</span><br><span class="line"></span><br><span class="line">image = image.convert(<span class="string">'RGB'</span>)</span><br><span class="line">image.save(<span class="string">'headImg'</span>+<span class="string">"/"</span>+<span class="string">"all.jpg"</span>)</span><br><span class="line">itchat.send_image(<span class="string">'headImg'</span>+<span class="string">"/"</span>+<span class="string">"all.jpg"</span> , <span class="string">'filehelper'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="直接执行"><a href="#直接执行" class="headerlink" title="直接执行"></a>直接执行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">sudo chmod +x wechat_head_img.py</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">python wechat_head_img.py</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装itchat和pillow库&quot;&gt;&lt;a href=&quot;#安装itchat和pillow库&quot; class=&quot;headerlink&quot; title=&quot;安装itchat和pillow库&quot;&gt;&lt;/a&gt;安装itchat和pillow库&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
      <category term="wechat" scheme="http:zhuhaijun.cn/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>python实现微信机器人AI智能回复</title>
    <link href="http:zhuhaijun.cn/2018/12/24/python%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BAAI%E6%99%BA%E8%83%BD%E5%9B%9E%E5%A4%8D/"/>
    <id>http:zhuhaijun.cn/2018/12/24/python实现微信机器人AI智能回复/</id>
    <published>2018-12-24T11:08:06.000Z</published>
    <updated>2018-12-24T11:24:57.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册图灵机器人网站的账号"><a href="#注册图灵机器人网站的账号" class="headerlink" title="注册图灵机器人网站的账号"></a>注册图灵机器人网站的账号</h1><p>链接：<a href="http://www.tuling123.com/" target="_blank" rel="noopener">http://www.tuling123.com/</a><br>你可以获取自己的图灵机器人apikey</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import itchat</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def get_response(_info):</span><br><span class="line">    <span class="built_in">print</span>(_info)</span><br><span class="line">    api_url = <span class="string">'http://www.tuling123.com/openapi/api'</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'key'</span>: <span class="string">'your_tuling_apikey'</span>, <span class="comment"># 上一步注册的apikey</span></span><br><span class="line">        <span class="string">'info'</span>: _info,</span><br><span class="line">        <span class="string">'userid'</span>: <span class="string">'robot'</span>,          <span class="comment"># 随意填</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(api_url, data=data).json()</span><br><span class="line">    <span class="built_in">print</span>(r.get(<span class="string">'text'</span>))</span><br><span class="line">    <span class="built_in">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@itchat.msg_register(itchat.content.TEXT)</span><br><span class="line">def text_reply(msg):</span><br><span class="line">    <span class="built_in">return</span> r<span class="string">"[Bao]"</span> + get_response(msg[<span class="string">"Text"</span>])[<span class="string">"text"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"start"</span>)</span><br><span class="line">    itchat.auto_login(hotReload=True)</span><br><span class="line">    itchat.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注册图灵机器人网站的账号&quot;&gt;&lt;a href=&quot;#注册图灵机器人网站的账号&quot; class=&quot;headerlink&quot; title=&quot;注册图灵机器人网站的账号&quot;&gt;&lt;/a&gt;注册图灵机器人网站的账号&lt;/h1&gt;&lt;p&gt;链接：&lt;a href=&quot;http://www.tuling1
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
      <category term="wechat" scheme="http:zhuhaijun.cn/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>Mac teminal ssh 免密码</title>
    <link href="http:zhuhaijun.cn/2018/12/21/Mac-teminal-ssh-%E5%85%8D%E5%AF%86%E7%A0%81/"/>
    <id>http:zhuhaijun.cn/2018/12/21/Mac-teminal-ssh-免密码/</id>
    <published>2018-12-21T11:13:16.000Z</published>
    <updated>2018-12-21T11:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、创建expect脚本"><a href="#一、创建expect脚本" class="headerlink" title="一、创建expect脚本"></a>一、创建expect脚本</h1><ol><li><p>在/usr/local/bin目录下创建item2ssh.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 15</span><br><span class="line"><span class="built_in">set</span> port [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> username [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> host [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> passwd [lindex <span class="variable">$argv</span> 3]</span><br><span class="line">spawn ssh -p <span class="variable">$port</span> <span class="variable">$username</span>@<span class="variable">$host</span></span><br><span class="line">expect &#123;</span><br><span class="line">        <span class="string">"(yes/no)?"</span></span><br><span class="line">        &#123;send <span class="string">"yes\n"</span>;exp_continue&#125;</span><br><span class="line">        <span class="string">"password:"</span></span><br><span class="line">        &#123;send <span class="string">"<span class="variable">$passwd</span>\n"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure></li><li><p>赋予可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod +x item2ssh.sh</span><br></pre></td></tr></table></figure></li></ol><h1 id="二、创建alias"><a href="#二、创建alias" class="headerlink" title="二、创建alias"></a>二、创建alias</h1><ol start="3"><li><p>创建alias<br>在~目录下，创建.bash_alies文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ssh2std=<span class="string">'item2login.sh 22 username ip passwd'</span></span><br></pre></td></tr></table></figure></li><li><p>修改.bash_profile<br>添加以下几行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bash_aliases ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">source</span> ~/.bash_aliases</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><p>5.source使之生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>这样以后，直接敲ssd2std 就可以免密码ssh登录到std机器上了。</p><h1 id="三、item2中使用"><a href="#三、item2中使用" class="headerlink" title="三、item2中使用"></a>三、item2中使用</h1><p>在item2软件中，<code>comand</code>+<code>,</code> 弹出Preferences，<br>然后可以添加Profiles,如下图所示<br><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/item2.jpg" alt="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/item2.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、创建expect脚本&quot;&gt;&lt;a href=&quot;#一、创建expect脚本&quot; class=&quot;headerlink&quot; title=&quot;一、创建expect脚本&quot;&gt;&lt;/a&gt;一、创建expect脚本&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在/usr/local/bin目录下创建i
      
    
    </summary>
    
      <category term="Mac" scheme="http:zhuhaijun.cn/categories/Mac/"/>
    
    
      <category term="mac" scheme="http:zhuhaijun.cn/tags/mac/"/>
    
      <category term="ssh" scheme="http:zhuhaijun.cn/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>MAC使用nginx分发80至8080端口</title>
    <link href="http:zhuhaijun.cn/2018/12/21/MAC%E4%BD%BF%E7%94%A8nginx%E5%88%86%E5%8F%9180%E8%87%B38080%E7%AB%AF%E5%8F%A3/"/>
    <id>http:zhuhaijun.cn/2018/12/21/MAC使用nginx分发80至8080端口/</id>
    <published>2018-12-21T11:13:03.000Z</published>
    <updated>2018-12-21T11:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、使用背景"><a href="#1、使用背景" class="headerlink" title="1、使用背景"></a>1、使用背景</h1><p>由于项目必须要启动80端口，但是mac系统中非root用户无法直接使用1024以下的端口</p><h1 id="2、释放apache的80端口"><a href="#2、释放apache的80端口" class="headerlink" title="2、释放apache的80端口"></a>2、释放apache的80端口</h1><p>由于Mac OS是自带Apache服务的，它本身占用了80端口，首先你需要将Apache的监听端口改为其他端口或者将其直接卸载，我选用的是将其端口改为8011<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apache2/httpd.conf</span><br></pre></td></tr></table></figure></p><p>Listen 8011</p><p>改动后，重启生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/apachectl restart</span><br></pre></td></tr></table></figure></p><p>到这里，你已经释放了80端口</p><h1 id="3、使用Nginx分发80端口到8080端口"><a href="#3、使用Nginx分发80端口到8080端口" class="headerlink" title="3、使用Nginx分发80端口到8080端口"></a>3、使用Nginx分发80端口到8080端口</h1><ol start="0"><li>安装brew</li></ol><p>见官网：<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">https://brew.sh/index_zh-cn.html</a></p><ol><li><p>使用Homebrew安装库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew search nginx</span><br><span class="line">brew install nginx</span><br></pre></td></tr></table></figure></li><li><p>安装好了后，修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost l.sogou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location ~* ^/h5/&#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8091;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* ^/weixin/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8093;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* ^/api/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8087;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page             /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server下的结点：<br>listen：监听80端口<br>server_name：转发到哪个地址<br>proxy_pass：代理到哪个地址</p><ol start="3"><li>Nginx开机启动</li></ol><p>你需要了解的就是plist文件。plist就是property list format的意思，是苹果用来保存应用数据的格式，其实就是个xml。<br>可以在/usr/local/opt/nginx 下找到nginx对应的plist文件，比如在作者电脑上是 homebrew.mxcl.nginx.plist 。</p><p>需要把这个文件复制到 /Library/LaunchDaemons 下，系统启动时启动。<br>也可以复制到 /Library/LaunchAgents下，在用户登录时启动。<br>接着执行launchctl load -w，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/<span class="built_in">local</span>/opt/nginx/*.plist /Library/LaunchDaemons</span><br><span class="line"></span><br><span class="line">sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure><p>最后，重启你的机器，你会发现nginx在80端口启动了，试着通过<a href="http://localhost直接访问" target="_blank" rel="noopener">http://localhost直接访问</a></p><ol start="4"><li>修改配置 重启生效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/opt/nginx/bin/</span><br><span class="line">sudo ./nginx -s reload</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、使用背景&quot;&gt;&lt;a href=&quot;#1、使用背景&quot; class=&quot;headerlink&quot; title=&quot;1、使用背景&quot;&gt;&lt;/a&gt;1、使用背景&lt;/h1&gt;&lt;p&gt;由于项目必须要启动80端口，但是mac系统中非root用户无法直接使用1024以下的端口&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
      <category term="Mac" scheme="http:zhuhaijun.cn/categories/Mac/"/>
    
    
      <category term="mac" scheme="http:zhuhaijun.cn/tags/mac/"/>
    
      <category term="nginx" scheme="http:zhuhaijun.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http:zhuhaijun.cn/2018/12/19/hello-world/"/>
    <id>http:zhuhaijun.cn/2018/12/19/hello-world/</id>
    <published>2018-12-19T05:17:36.000Z</published>
    <updated>2018-12-19T05:17:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java字节码分析工具classpy</title>
    <link href="http:zhuhaijun.cn/2018/12/05/classpy/"/>
    <id>http:zhuhaijun.cn/2018/12/05/classpy/</id>
    <published>2018-12-05T09:10:04.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节码分析工具classpy"><a href="#字节码分析工具classpy" class="headerlink" title="字节码分析工具classpy"></a>字节码分析工具classpy</h1><p>这个开源工具的地址: <a href="https://github.com/zxh0/classpy" target="_blank" rel="noopener">https://github.com/zxh0/classpy</a></p><ol><li>classpy环境依赖下载地址上有说明，首先保证你的环境里配置了gradle</li><li>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:zxh0/classpy.git 下载工具</li><li>进入到classpy目录下执行命令<br>3.1. 编译：gradle uberjar<br>4.2. 启动：gradle run</li></ol><p>经过以上两步就可以打开classpy界面，再打开一个class文件，如下所示</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/classpy.png" alt="classpy" title="classpy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字节码分析工具classpy&quot;&gt;&lt;a href=&quot;#字节码分析工具classpy&quot; class=&quot;headerlink&quot; title=&quot;字节码分析工具classpy&quot;&gt;&lt;/a&gt;字节码分析工具classpy&lt;/h1&gt;&lt;p&gt;这个开源工具的地址: &lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="jvm" scheme="http:zhuhaijun.cn/tags/jvm/"/>
    
      <category term="classpy" scheme="http:zhuhaijun.cn/tags/classpy/"/>
    
  </entry>
  
  <entry>
    <title>install go</title>
    <link href="http:zhuhaijun.cn/2018/11/06/install-go/"/>
    <id>http:zhuhaijun.cn/2018/11/06/install-go/</id>
    <published>2018-11-06T11:56:00.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h1><ol><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压到/usr/local目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -C /usr/<span class="built_in">local</span> -zxf go1.11.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>加入环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure></li></ol><h1 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h1><p>1、下载<a href="https://studygolang.com/dl" target="_blank" rel="noopener">https://studygolang.com/dl</a><br>2、双击安装<br>3、默认情况下.msi文件会安装在 c:\Go 目录下。你可以将 c:\Go\bin 目录添加到 PATH 环境变量中。添加后你需要重启命令窗口才能生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-下安装&quot;&gt;&lt;a href=&quot;#Linux-下安装&quot; class=&quot;headerlink&quot; title=&quot;Linux 下安装&quot;&gt;&lt;/a&gt;Linux 下安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载&lt;/p&gt;
&lt;figure class=&quot;highlight b
      
    
    </summary>
    
      <category term="go" scheme="http:zhuhaijun.cn/categories/go/"/>
    
    
      <category term="go" scheme="http:zhuhaijun.cn/tags/go/"/>
    
      <category term="install" scheme="http:zhuhaijun.cn/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>windows cmdpython交互模式下cp65001异常</title>
    <link href="http:zhuhaijun.cn/2018/11/01/windows%20cmd%20python%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F%E4%B8%8Bcp65001%E5%BC%82%E5%B8%B8/"/>
    <id>http:zhuhaijun.cn/2018/11/01/windows cmd python交互模式下cp65001异常/</id>
    <published>2018-11-01T08:11:39.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>python安装后进入命令行交互模式，输入任何代码都报 <code>unknown encoding: cp65001</code>异常</p><p>需要将编码(UTF-8)修改为 简体中文(GBK)</p><p>在CMD窗口执行　<code>chcp 936</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python安装后进入命令行交互模式，输入任何代码都报 &lt;code&gt;unknown encoding: cp65001&lt;/code&gt;异常&lt;/p&gt;
&lt;p&gt;需要将编码(UTF-8)修改为 简体中文(GBK)&lt;/p&gt;
&lt;p&gt;在CMD窗口执行　&lt;code&gt;chcp 936&lt;/cod
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 快捷键与 Eclipse 对比</title>
    <link href="http:zhuhaijun.cn/2018/11/01/IntelliJ-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http:zhuhaijun.cn/2018/11/01/IntelliJ-IDEA-快捷键/</id>
    <published>2018-11-01T06:14:06.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>IntelliJ IDEA快捷键:</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/idea%20keymap.png" alt="IntelliJ IDEA快捷键" title="IntelliJ IDEA快捷键"></p><p>Eclipse vs IDEA快捷键:</p><p><img src="https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/eclipse%20vs%20%20idea.png" alt="Eclipse vs IDEA快捷键" title="Eclipse vs IDEA快捷键"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IntelliJ IDEA快捷键:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhuhj083/storehouse/master/pictures/hexo/idea%20keymap.png&quot; alt=&quot;Int
      
    
    </summary>
    
      <category term="tool" scheme="http:zhuhaijun.cn/categories/tool/"/>
    
    
      <category term="idea" scheme="http:zhuhaijun.cn/tags/idea/"/>
    
      <category term="tool" scheme="http:zhuhaijun.cn/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>用python写的一个简易的Http服务器</title>
    <link href="http:zhuhaijun.cn/2018/11/01/httpServer-by-python/"/>
    <id>http:zhuhaijun.cn/2018/11/01/httpServer-by-python/</id>
    <published>2018-11-01T03:37:30.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在看《Http权威指南》的时候，看到里面用Perl实现了一个最简单的Http的服务器。<br>于是我参考着里面的逻辑写了一个python版本的。</p><ol><li>创建服务器套接字（socket），把地址绑定到套接字上，并监听连接</li><li>服务器无限循环，接受客户端连接</li><li>客户端连接进来后，读取客户端发送的消息，并且打印Http请求报文</li><li>返回Http的响应报文</li></ol><p>运行以下的python脚本后，使用浏览器访问<a href="http://localhost:8080/即可。" target="_blank" rel="noopener">http://localhost:8080/即可。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">8080</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST,PORT)</span><br><span class="line"></span><br><span class="line">tcpSerSock = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcpSerSock.bind(ADDR)</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">responseStr = <span class="string">'''</span></span><br><span class="line"><span class="string">HTTP/1.0 200 OK</span></span><br><span class="line"><span class="string">Connection:close</span></span><br><span class="line"><span class="string">Content-type;text:plain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Hi there!</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'waiting for connection ...'</span></span><br><span class="line">    tcpCliSock , addr = tcpSerSock.accept()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'...connected from:'</span>,addr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = tcpCliSock.recv(BUFSIZE)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line">        tcpCliSock.send(responseStr)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tcpCliSock.close()</span><br><span class="line"></span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在看《Http权威指南》的时候，看到里面用Perl实现了一个最简单的Http的服务器。&lt;br&gt;于是我参考着里面的逻辑写了一个python版本的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建服务器套接字（socket），把地址绑定到套接字上，并监听连接&lt;/li&gt;
&lt;li&gt;服务器无限循
      
    
    </summary>
    
      <category term="python" scheme="http:zhuhaijun.cn/categories/python/"/>
    
    
      <category term="http" scheme="http:zhuhaijun.cn/tags/http/"/>
    
      <category term="python" scheme="http:zhuhaijun.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>万圣节</title>
    <link href="http:zhuhaijun.cn/2018/11/01/%E4%B8%87%E5%9C%A3%E8%8A%82/"/>
    <id>http:zhuhaijun.cn/2018/11/01/万圣节/</id>
    <published>2018-10-31T16:00:07.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="万圣节"><a href="#万圣节" class="headerlink" title="万圣节"></a>万圣节</h1><p>今天是万圣节，11月1日，又是新的一个月的来临。</p><p>最近的一段时间过得很开心。</p><p>以后还是得继续更新日志才好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;万圣节&quot;&gt;&lt;a href=&quot;#万圣节&quot; class=&quot;headerlink&quot; title=&quot;万圣节&quot;&gt;&lt;/a&gt;万圣节&lt;/h1&gt;&lt;p&gt;今天是万圣节，11月1日，又是新的一个月的来临。&lt;/p&gt;
&lt;p&gt;最近的一段时间过得很开心。&lt;/p&gt;
&lt;p&gt;以后还是得继续更新日志才好
      
    
    </summary>
    
      <category term="随笔" scheme="http:zhuhaijun.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http:zhuhaijun.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式使用的特殊符号和字符</title>
    <link href="http:zhuhaijun.cn/2018/10/30/RE-Metacharacter/"/>
    <id>http:zhuhaijun.cn/2018/10/30/RE-Metacharacter/</id>
    <published>2018-10-30T03:53:21.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式中最常见的符号和字符"><a href="#正则表达式中最常见的符号和字符" class="headerlink" title="正则表达式中最常见的符号和字符"></a>正则表达式中最常见的符号和字符</h1><table><thead><tr><th>记号</th><th>说明</th><th>正则表达式样例</th></tr></thead><tbody><tr><td><em>literal</em></td><td>匹配字符串的值</td><td>foo</td></tr><tr><td><em>re1&#124;rel2</em></td><td>匹配正则表达式re1或re2</td><td>foo&#124;bar</td></tr><tr><td>.</td><td>匹配任何字符（换行符除外）</td><td>b.b</td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^Dear</td></tr><tr><td>$</td><td>匹配字符串的结尾</td><td>/bin/*sh$</td></tr><tr><td>*</td><td>匹配前面出现的正则表达式零次或多次</td><td>[A-Za-z0-9]*</td></tr><tr><td>+</td><td>匹配前面出现的正则表达式一次或多次</td><td>[a-z]+\.com</td></tr><tr><td>?</td><td>匹配前面出现的正则表达式零次或一次</td><td>goo?</td></tr><tr><td>{N}</td><td>匹配前面出现的正则表达式N次</td><td>[0-9]{3}</td></tr><tr><td>{M,N}</td><td>匹配重复出现M次到N次的正则表达式</td><td>[0-9]{5,9}</td></tr><tr><td>[…]</td><td>匹配字符组里出现的任意一个字符</td><td>[aeiou]</td></tr><tr><td>[..x-y..]</td><td>匹配从字符x到y中任意一个字符</td><td>[0-9],[A-Za-z]</td></tr><tr><td>[^…]</td><td>不匹配此字符组中出现的任何一个字符，包括某一范围的字符（如果在此字符集中出现）</td><td>[^aeiou],[^A-Za-z]</td></tr><tr><td>(*&#124;+&#124;?&#124;{})?</td><td>用于上面出现的任何“非贪婪”，版本重复匹配次数符号</td><td>.*?[a-z]</td></tr><tr><td>(…)</td><td>匹配封闭括号中正则表达式（RE），并保存为子组</td><td>（[0-9]{3}）?,f(oo&#124;u)bar</td></tr><tr><td>\d</td><td>匹配任何数字，和[0-9]一样，（\D是\d的反义：任何非数字）</td><td>data\d+.txt</td></tr><tr><td>\w</td><td>匹配任何数字和字符，即<a href="\W是\w的反义">A-Za-z0-9</a></td><td>[A-Za-z_]\w+</td></tr><tr><td>\s</td><td>匹配任何空白符，和[\n\t\r\v\f]相同，（\S是\s的反义）</td><td>of\sthe</td></tr><tr><td>\b</td><td>匹配单词边界（\B是\b的反义）</td><td>\bThe\b</td></tr><tr><td>\nn</td><td>匹配已保存的子组(参考上面的正则表达式符合:（…））)</td><td>price:\16</td></tr><tr><td>\c</td><td>逐一匹配特殊字符c（即取消它的特殊含义，按字面匹配）</td><td>.,\,*</td></tr><tr><td>\A(\Z)</td><td>匹配字符换的起始（结束）</td><td>\ADear</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式中最常见的符号和字符&quot;&gt;&lt;a href=&quot;#正则表达式中最常见的符号和字符&quot; class=&quot;headerlink&quot; title=&quot;正则表达式中最常见的符号和字符&quot;&gt;&lt;/a&gt;正则表达式中最常见的符号和字符&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;

      
    
    </summary>
    
      <category term="re" scheme="http:zhuhaijun.cn/categories/re/"/>
    
    
      <category term="re" scheme="http:zhuhaijun.cn/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Spring中的BeanPostProcessor简介</title>
    <link href="http:zhuhaijun.cn/2018/08/06/Spring%E4%B8%AD%E7%9A%84BeanPostProcessor/"/>
    <id>http:zhuhaijun.cn/2018/08/06/Spring中的BeanPostProcessor/</id>
    <published>2018-08-06T12:26:50.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeanPostProcessor简介"><a href="#BeanPostProcessor简介" class="headerlink" title="BeanPostProcessor简介"></a>BeanPostProcessor简介</h1><p>BeanPostProcessor是Spring IOC容器给我们提供的一个扩展接口。接口声明如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//bean初始化方法调用前被调用</span></span><br><span class="line">    <span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">//bean初始化方法调用后被调用</span></span><br><span class="line">    <span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BeanPostProcessor接口有2个回调方法，当一个BeanPostProcessor的实现类注册到Spring IOC容器后，对于该Spring IOC 容器所创造的每一个bean实例的初始化方法（如afterPropertiesSet和自定义init-method方法）调用前，将会调用BeanPostProcessor中的postProcessBeforeInitialization方法；而在bean实例初始化方法调用完成后，则会调用BeanPostProcessor中的postProcessAfterInitialization方法。</p><p>整个调用过程简单示意如下：</p><blockquote><p>Spring IOC容器实例化Bean</p></blockquote><blockquote><p>调用BeanPostProcessor的postProcessBeforeInitialization方法</p></blockquote><blockquote><p>调用bean实例的初始化方法</p></blockquote><blockquote><p>调用BeanPostProcessor的postProcessAfterInitialization方法</p></blockquote><p>可以看到，Spring容器通过BeanPostProcessor给了我们一个机会对Spring管理的bean进行再加工。比如：我们可以修改bean的属性，可以给bean生成一个动态代理实例等等。</p><p>一些Spring AOP的底层处理也是通过实现BeanPostProcessor来执行代理包装逻辑的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BeanPostProcessor简介&quot;&gt;&lt;a href=&quot;#BeanPostProcessor简介&quot; class=&quot;headerlink&quot; title=&quot;BeanPostProcessor简介&quot;&gt;&lt;/a&gt;BeanPostProcessor简介&lt;/h1&gt;&lt;p&gt;Be
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http:zhuhaijun.cn/tags/spring/"/>
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring环境搭建</title>
    <link href="http:zhuhaijun.cn/2018/08/01/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http:zhuhaijun.cn/2018/08/01/Spring环境搭建/</id>
    <published>2018-08-01T03:08:39.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring的源码在Github上，基于Gradle的构建来构建项目。所以要构建Spring源码首先要安装Github以及Gradle。<br>github的安装不再赘述。</p><h1 id="安装gradle"><a href="#安装gradle" class="headerlink" title="安装gradle"></a>安装gradle</h1><p>Gradle是一个基于Groovy的构建工具，它使用Groovy来编写构建脚本，支持依赖管理和多项目构建，类似于maven。</p><p>下载地址为：<a href="http://gradle.org/downloads" target="_blank" rel="noopener">http://gradle.org/downloads</a></p><p>下载后解压到指定目录，我放在了<code>C:\Program Files\gradle-1.6</code></p><p>然后配置环境变量</p><ol><li>根据对应目录创建GRADLE_HOME系统变量</li><li>将系统变量加入到path中</li><li>测试，打开命令窗口输入<code>gradle -version</code>,如果安装成功会出现Gradle对应的版本信息。</li></ol><h1 id="下载Spring"><a href="#下载Spring" class="headerlink" title="下载Spring"></a>下载Spring</h1><p>例如要将下载的源码存储到g:\spring下，进入这个目录，输入一下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:spring-projects/spring-framework.git</span><br><span class="line"><span class="built_in">cd</span> spring-framework</span><br></pre></td></tr></table></figure></p><p>等待一段时间后，完成下载。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:spring-projects/spring-framework.git</span><br><span class="line">Cloning into <span class="string">'spring-framework'</span>...</span><br><span class="line">remote: Counting objects: 438994, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (66/66), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 438994 (delta 6), reused 39 (delta 0), pack-reused 438914</span><br><span class="line">Receiving objects: 100% (438994/438994), 111.82 MiB | 2.83 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (211139/211139), <span class="keyword">done</span>.</span><br><span class="line">Checking out files: 100% (8092/8092), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure></p><p>进入这个目录，会看到已经存在了相应的源码信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Spring-framework/</span><br><span class="line">$ ll</span><br><span class="line">total 53</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089 11072 8月   1 12:06 build.gradle</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 buildSrc/</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  2395 8月   1 12:06 CODE_OF_CONDUCT.adoc</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  6401 8月   1 12:06 CONTRIBUTING.md</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 gradle/</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089    30 8月   1 12:06 gradle.properties</span><br><span class="line">-rwxr-xr-x 1 zhuhaijun 1049089  5533 8月   1 12:06 gradlew*</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  2348 8月   1 12:06 gradlew.bat</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  2486 8月   1 12:06 import-into-eclipse.md</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  1868 8月   1 12:06 import-into-idea.md</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089  2290 8月   1 12:06 README.md</span><br><span class="line">-rw-r--r-- 1 zhuhaijun 1049089   831 8月   1 12:06 settings.gradle</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-aop/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-aspects/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-beans/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-context/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-context-indexer/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-context-support/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-core/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-expression/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-framework-bom/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-instrument/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-jcl/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-jdbc/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-jms/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-messaging/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-orm/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-oxm/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-test/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-tx/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-web/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-webflux/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-webmvc/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 spring-websocket/</span><br><span class="line">drwxr-xr-x 1 zhuhaijun 1049089     0 8月   1 12:06 src/</span><br></pre></td></tr></table></figure></p><h1 id="构建spring"><a href="#构建spring" class="headerlink" title="构建spring"></a>构建spring</h1><p>当前的源码并不可以直接导入到Eclipse中，我们还需要将源码转换为Eclipse可以读取的形式。</p><p>在每个目录下，一个个地执行 gradle cleanidea eclipse<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ gradle cleanidea eclipse</span><br><span class="line">Starting a Gradle Daemon, 1 incompatible Daemon could not be reused, use --statu                                                                                                                                                                                               s <span class="keyword">for</span> details</span><br><span class="line">Generating JAR file <span class="string">'gradle-api-4.9.jar'</span></span><br><span class="line">&gt; Task :buildSrc:compileJava NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:compileGroovy</span><br><span class="line">&gt; Task :buildSrc:processResources</span><br><span class="line">&gt; Task :buildSrc:classes</span><br><span class="line">&gt; Task :buildSrc:jar</span><br><span class="line">&gt; Task :buildSrc:assemble</span><br><span class="line">&gt; Task :buildSrc:compileTestJava NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:compileTestGroovy NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:testClasses UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:<span class="built_in">test</span> NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:check UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:build</span><br><span class="line">&gt; Task :spring-tx:cleanIdeaModule UP-TO-DATE</span><br><span class="line">&gt; Task :spring-tx:cleanIdea UP-TO-DATE</span><br><span class="line">&gt; Task :spring-tx:eclipseClasspath</span><br><span class="line">&gt; Task :spring-tx:eclipseJdtPrepare</span><br><span class="line">&gt; Task :spring-tx:eclipseJdt</span><br><span class="line">&gt; Task :spring-tx:eclipseProject</span><br><span class="line">&gt; Task :spring-tx:eclipseSettings</span><br><span class="line">&gt; Task :spring-tx:eclipseWstComponent</span><br><span class="line">&gt; Task :spring-tx:eclipse</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 36s</span><br><span class="line">8 actionable tasks: 6 executed, 2 up-to-date</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring的源码在Github上，基于Gradle的构建来构建项目。所以要构建Spring源码首先要安装Github以及Gradle。&lt;br&gt;github的安装不再赘述。&lt;/p&gt;
&lt;h1 id=&quot;安装gradle&quot;&gt;&lt;a href=&quot;#安装gradle&quot; class=&quot;h
      
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http:zhuhaijun.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>使用pushy进行APNs消息推送</title>
    <link href="http:zhuhaijun.cn/2018/07/25/%E4%BD%BF%E7%94%A8pushy%E8%BF%9B%E8%A1%8CAPNs%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
    <id>http:zhuhaijun.cn/2018/07/25/使用pushy进行APNs消息推送/</id>
    <published>2018-07-25T08:33:26.000Z</published>
    <updated>2018-12-19T05:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前做了一个iOS消息推送的平台，主要是通过调用苹果提供的APNs接口进行消息的推送。最后采用了Pushy框架来进行推送。</p><h1 id="pushy简介"><a href="#pushy简介" class="headerlink" title="pushy简介"></a>pushy简介</h1><p>Pushy是用于发送APN（iOS、MacOS和Safari）推送通知的Java库，由Turo工程师编写和维护。</p><p>可以在github上获取源码和介绍：<a href="https://github.com/relayrides/pushy" target="_blank" rel="noopener">https://github.com/relayrides/pushy</a></p><p>官方文档：<a href="https://github.com/relayrides/pushy/wiki" target="_blank" rel="noopener">https://github.com/relayrides/pushy/wiki</a></p><h1 id="使用pushy"><a href="#使用pushy" class="headerlink" title="使用pushy"></a>使用pushy</h1><h2 id="首先引入jar"><a href="#首先引入jar" class="headerlink" title="首先引入jar"></a>首先引入jar</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.turo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pushy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.turo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pushy-dropwizard-metrics-listener<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.dropwizard.metrics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>metrics-servlets<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>下面这段代码主要用户建立服务器与苹果服务器之间的链接，当我们每次执行推送消息的时候，会去检查这个链接是不是还存在，如果存在就直接使用，否则执行下面的代码建立链接。与苹果的服务器的链接长时间没有数据发送过去的话，苹果服务器会主动将它断掉。</p><p>同时也可以通过setApnsServer函数来指定是开发环境还是生产环境。</p><p>是基于Netty的，通过ApnsClientBuilder我们可以根据需要来修改ApnsClient的连接数和EventLoopGroups的线程数<br><br>setConcurrentConnections：设置服务器与苹果服务器建立几个链接通道，这里是建立4个，非越多越好<br><br>setEventLoopGroup：建立几个线程来处理，这里设置了4个。相当于16个线程同时处理<br><br>关于连接数和EventLoopGroup线程数官不要配置EventLoopGroups的线程数超过APNs连接数。</p><p>setMetricsListener：可以设置监听器，来监听发送消息的结果<br>setClientCredentials：证书和密码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (apnsClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">4</span>);</span><br><span class="line">        String apnsServer = mode.equals(<span class="string">"sandbox"</span>)?ApnsClientBuilder.DEVELOPMENT_APNS_HOST:ApnsClientBuilder.PRODUCTION_APNS_HOST;</span><br><span class="line">        apnsClient = <span class="keyword">new</span> ApnsClientBuilder().setApnsServer(apnsServer)</span><br><span class="line">        .setClientCredentials( <span class="keyword">new</span> FileInputStream(p12_path), password )</span><br><span class="line">                .setConcurrentConnections(<span class="number">4</span>)</span><br><span class="line">                .setEventLoopGroup(eventLoopGroup)</span><br><span class="line">                .setMetricsListener( metricsListener )</span><br><span class="line">                .build();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.err.println(_.f(<span class="string">"[%s][ERROR]ios get pushy apns client failed!"</span>,format.print(System.currentTimeMillis())));</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送推送"><a href="#发送推送" class="headerlink" title="发送推送"></a>发送推送</h2><p>关于消息的推送，注意一定要使用异步操作，Pushy发送消息会返回一个Netty Future对象，通过它可以拿到消息发送的情况。</p><p>APNs服务器可以保证同时发送1500条消息，当超过这个限制时，Pushy会缓存消息，所以我们不必担心异步操作发送的消息过多（当我们的消息非常多，达到上亿时，我们也得做一些控制，避免缓存过大，内存不足，Pushy给出了使用Semaphore的解决方法）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Future&lt;PushNotificationResponse&lt;SimpleApnsPushNotification&gt;&gt; future = apnsClient.sendNotification(pushNotification);</span><br><span class="line">          future.addListener(<span class="keyword">new</span> PushNotificationResponseListener&lt;SimpleApnsPushNotification&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(<span class="keyword">final</span> PushNotificationFuture&lt;SimpleApnsPushNotification, PushNotificationResponse&lt;SimpleApnsPushNotification&gt;&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                  <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                      <span class="keyword">final</span> PushNotificationResponse&lt;SimpleApnsPushNotification&gt; pushNotificationResponse = future.getNow();</span><br><span class="line">                      <span class="keyword">if</span> (pushNotificationResponse.isAccepted()) &#123;</span><br><span class="line">                              successCnt.incrementAndGet();</span><br><span class="line">                          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              Date invalidTime = pushNotificationResponse.getTokenInvalidationTimestamp();</span><br><span class="line">                              <span class="keyword">if</span> (invalidTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                  System.out.println(_.f(<span class="string">"[%s][ERROR]Notification deviceToken="</span>+token+<span class="string">" rejected by the APNs gateway:"</span> + pushNotificationResponse.getRejectionReason()+<span class="string">"\t...and the token is invalid as of "</span> + pushNotificationResponse.getTokenInvalidationTimestamp(),format.print(System.currentTimeMillis())));</span><br><span class="line">                              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                              System.out.println(_.f(<span class="string">"[%s][ERROR]Notification deviceToken="</span>+token+<span class="string">" rejected by the APNs gateway:"</span> + pushNotificationResponse.getRejectionReason(),format.print(System.currentTimeMillis())));</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                          System.out.println(_.f(<span class="string">"[%s][ERROR]send notification device token="</span>+token+<span class="string">" is failed:"</span> + future.cause().getMessage(),format.print(System.currentTimeMillis())));</span><br><span class="line">                      &#125;</span><br><span class="line">                      latch.countDown();</span><br><span class="line">                      semaphore.release();</span><br><span class="line">                 &#125;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.ApnsClient;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.ApnsClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.PushNotificationResponse;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.metrics.dropwizard.DropwizardApnsClientMetricsListener;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.ApnsPayloadBuilder;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.SimpleApnsPushNotification;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.TokenUtil;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.concurrent.PushNotificationFuture;</span><br><span class="line"><span class="keyword">import</span> com.turo.pushy.apns.util.concurrent.PushNotificationResponseListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOSPushClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApnsClient apnsClient = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//APNs服务器可以保证同时发送1500条消息，当超过这个限制时，Pushy会缓存消息，所以我们不必担心异步操作发送的消息过多</span></span><br><span class="line">    <span class="comment">//通过Semaphore来进行流控，防止缓存过大，内存不足</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">6000</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span> DropwizardApnsClientMetricsListener metricsListener = <span class="keyword">new</span> DropwizardApnsClientMetricsListener();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter format = DateTimeFormat.forPattern(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String mode,String p12_path ,String password, <span class="keyword">final</span> List&lt;String&gt; deviceTokens, String alertTitle , String alertBody,<span class="keyword">int</span> badgeNumber,Map&lt;String,String&gt; extraMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (apnsClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                EventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">4</span>);</span><br><span class="line">                String apnsServer = mode.equals(<span class="string">"sandbox"</span>)?ApnsClientBuilder.DEVELOPMENT_APNS_HOST:ApnsClientBuilder.PRODUCTION_APNS_HOST;</span><br><span class="line">                apnsClient = <span class="keyword">new</span> ApnsClientBuilder().setApnsServer(apnsServer)</span><br><span class="line">                .setClientCredentials( <span class="keyword">new</span> FileInputStream(p12_path), password )</span><br><span class="line">                        .setConcurrentConnections(<span class="number">4</span>)</span><br><span class="line">                        .setEventLoopGroup(eventLoopGroup)</span><br><span class="line">                        .setMetricsListener( metricsListener )</span><br><span class="line">                        .build();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.err.println(_.f(<span class="string">"[%s][ERROR]ios get pushy apns client failed!"</span>,format.print(System.currentTimeMillis())));</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> total = deviceTokens.size();</span><br><span class="line">        <span class="comment">//通过CountDownLatch来标记消息是否发送完成</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(deviceTokens.size());</span><br><span class="line">        <span class="keyword">final</span> AtomicLong successCnt = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">long</span> startPushTime =  System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String deviceToken : deviceTokens) &#123;</span><br><span class="line"></span><br><span class="line">        ApnsPayloadBuilder payloadBuilder = <span class="keyword">new</span> ApnsPayloadBuilder();</span><br><span class="line">            payloadBuilder.setAlertBody(alertBody);</span><br><span class="line">            payloadBuilder.setAlertTitle(alertTitle);</span><br><span class="line">            payloadBuilder.setBadgeNumber(badgeNumber);</span><br><span class="line">            payloadBuilder.setSoundFileName(<span class="string">"default"</span>);</span><br><span class="line">            <span class="comment">//自定义键值对，其中value是Object，可以支持多层的json字串，这个根据业务需求而定</span></span><br><span class="line">            <span class="keyword">if</span>(extraMap != <span class="keyword">null</span> &amp;&amp; extraMap.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">for</span>(String key : extraMap.keySet())&#123;</span><br><span class="line">        String value = extraMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"extraData"</span>.equals(key))&#123;</span><br><span class="line">        payloadBuilder.addCustomProperty(key,JSONObject.parse(value));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        payloadBuilder.addCustomProperty(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            String payload = payloadBuilder.buildWithDefaultMaximumLength(); <span class="comment">//最大4k</span></span><br><span class="line">            <span class="keyword">final</span> String token = TokenUtil.sanitizeTokenString(deviceToken);</span><br><span class="line">            SimpleApnsPushNotification pushNotification = <span class="keyword">new</span> SimpleApnsPushNotification(token, <span class="string">"com.sogou.sogoureader"</span> , payload);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                System.out.println(_.f(<span class="string">"[%s][ERROR]ios push get semaphore failed, deviceToken:"</span>+deviceToken,format.print(System.currentTimeMillis())));</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Future&lt;PushNotificationResponse&lt;SimpleApnsPushNotification&gt;&gt; future = apnsClient.sendNotification(pushNotification);</span><br><span class="line">            future.addListener(<span class="keyword">new</span> PushNotificationResponseListener&lt;SimpleApnsPushNotification&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(<span class="keyword">final</span> PushNotificationFuture&lt;SimpleApnsPushNotification, PushNotificationResponse&lt;SimpleApnsPushNotification&gt;&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                        <span class="keyword">final</span> PushNotificationResponse&lt;SimpleApnsPushNotification&gt; pushNotificationResponse = future.getNow();</span><br><span class="line">                        <span class="keyword">if</span> (pushNotificationResponse.isAccepted()) &#123;</span><br><span class="line">                                successCnt.incrementAndGet();</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                Date invalidTime = pushNotificationResponse.getTokenInvalidationTimestamp();</span><br><span class="line">                                <span class="keyword">if</span> (invalidTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    System.out.println(<span class="string">"[ERROR]Notification deviceToken="</span>+token+<span class="string">" rejected by the APNs gateway."</span>);</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                System.out.println(<span class="string">"Notification deviceToken="</span>+token+<span class="string">" rejected by the APNs gateway"</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">"[ERROR]send notification device token="</span>+token+<span class="string">" is failed:"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        latch.countDown();</span><br><span class="line">                        semaphore.release();</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await(<span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"[ERROR]ios push latch await failed!"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endPushTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"IOSPushClient pushMessage success. [total push="</span> + total + <span class="string">"][succ push="</span> + (successCnt.get()) + <span class="string">"], totalcost= "</span> + (endPushTime - startTime) + <span class="string">", pushCost="</span> + (endPushTime - startPushTime) , format.print(System.currentTimeMillis())));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前做了一个iOS消息推送的平台，主要是通过调用苹果提供的APNs接口进行消息的推送。最后采用了Pushy框架来进行推送。&lt;/p&gt;
&lt;h1 id=&quot;pushy简介&quot;&gt;&lt;a href=&quot;#pushy简介&quot; class=&quot;headerlink&quot; title=&quot;pushy简介&quot;&gt;&lt;/a&gt;pushy简介&lt;/h1&gt;&lt;p&gt;Pushy是用于发送APN（iOS、MacOS和Safari）推送通知的Java库，由Turo工程师编写和维护。&lt;/p&gt;
&lt;p&gt;可以在github上获取源码和介绍：&lt;a href=&quot;https://github.com/relayrides/pushy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/relayrides/pushy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://github.com/relayrides/pushy/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/relayrides/pushy/wiki&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用pushy&quot;&gt;&lt;a href=&quot;#使用pushy&quot; class=&quot;headerlink&quot; title=&quot;使用pushy&quot;&gt;&lt;/a&gt;使用pushy&lt;/h1&gt;&lt;h2 id=&quot;首先引入jar&quot;&gt;&lt;a href=&quot;#首先引入jar&quot; class=&quot;headerlink&quot; title=&quot;首先引入jar&quot;&gt;&lt;/a&gt;首先引入jar&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.turo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;pushy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.12.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.turo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;pushy-dropwizard-metrics-listener&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.12.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.dropwizard.metrics&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;metrics-servlets&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;建立连接&quot;&gt;&lt;a href=&quot;#建立连接&quot; class=&quot;headerlink&quot; title=&quot;建立连接&quot;&gt;&lt;/a&gt;建立连接&lt;/h2&gt;&lt;p&gt;下面这段代码主要用户建立服务器与苹果服务器之间的链接，当我们每次执行推送消息的时候，会去检查这个链接是不是还存在，如果存在就直接使用，否则执行下面的代码建立链接。与苹果的服务器的链接长时间没有数据发送过去的话，苹果服务器会主动将它断掉。&lt;/p&gt;
&lt;p&gt;同时也可以通过setApnsServer函数来指定是开发环境还是生产环境。&lt;/p&gt;
&lt;p&gt;是基于Netty的，通过ApnsClientBuilder我们可以根据需要来修改ApnsClient的连接数和EventLoopGroups的线程数&lt;br&gt;&lt;br&gt;setConcurrentConnections：设置服务器与苹果服务器建立几个链接通道，这里是建立4个，非越多越好&lt;br&gt;&lt;br&gt;setEventLoopGroup：建立几个线程来处理，这里设置了4个。相当于16个线程同时处理&lt;br&gt;&lt;br&gt;关于连接数和EventLoopGroup线程数官不要配置EventLoopGroups的线程数超过APNs连接数。&lt;/p&gt;
&lt;p&gt;setMetricsListener：可以设置监听器，来监听发送消息的结果&lt;br&gt;setClientCredentials：证书和密码。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (apnsClient == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EventLoopGroup eventLoopGroup = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NioEventLoopGroup(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String apnsServer = mode.equals(&lt;span class=&quot;string&quot;&gt;&quot;sandbox&quot;&lt;/span&gt;)?ApnsClientBuilder.DEVELOPMENT_APNS_HOST:ApnsClientBuilder.PRODUCTION_APNS_HOST;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        apnsClient = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ApnsClientBuilder().setApnsServer(apnsServer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		.setClientCredentials( &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(p12_path), password )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .setConcurrentConnections(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .setEventLoopGroup(eventLoopGroup)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .setMetricsListener( metricsListener )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.err.println(_.f(&lt;span class=&quot;string&quot;&gt;&quot;[%s][ERROR]ios get pushy apns client failed!&quot;&lt;/span&gt;,format.print(System.currentTimeMillis())));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;发送推送&quot;&gt;&lt;a href=&quot;#发送推送&quot; class=&quot;headerlink&quot; title=&quot;发送推送&quot;&gt;&lt;/a&gt;发送推送&lt;/h2&gt;&lt;p&gt;关于消息的推送，注意一定要使用异步操作，Pushy发送消息会返回一个Netty Future对象，通过它可以拿到消息发送的情况。&lt;/p&gt;
&lt;p&gt;APNs服务器可以保证同时发送1500条消息，当超过这个限制时，Pushy会缓存消息，所以我们不必担心异步操作发送的消息过多（当我们的消息非常多，达到上亿时，我们也得做一些控制，避免缓存过大，内存不足，Pushy给出了使用Semaphore的解决方法）。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Future&amp;lt;PushNotificationResponse&amp;lt;SimpleApnsPushNotification&amp;gt;&amp;gt; future = apnsClient.sendNotification(pushNotification);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          future.addListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PushNotificationResponseListener&amp;lt;SimpleApnsPushNotification&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;operationComplete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; PushNotificationFuture&amp;lt;SimpleApnsPushNotification, PushNotificationResponse&amp;lt;SimpleApnsPushNotification&amp;gt;&amp;gt; future)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (future.isSuccess()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	            &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; PushNotificationResponse&amp;lt;SimpleApnsPushNotification&amp;gt; pushNotificationResponse = future.getNow();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pushNotificationResponse.isAccepted()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              successCnt.incrementAndGet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              Date invalidTime = pushNotificationResponse.getTokenInvalidationTimestamp();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (invalidTime != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  System.out.println(_.f(&lt;span class=&quot;string&quot;&gt;&quot;[%s][ERROR]Notification deviceToken=&quot;&lt;/span&gt;+token+&lt;span class=&quot;string&quot;&gt;&quot; rejected by the APNs gateway:&quot;&lt;/span&gt; + pushNotificationResponse.getRejectionReason()+&lt;span class=&quot;string&quot;&gt;&quot;\t...and the token is invalid as of &quot;&lt;/span&gt; + pushNotificationResponse.getTokenInvalidationTimestamp(),format.print(System.currentTimeMillis())));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              	System.out.println(_.f(&lt;span class=&quot;string&quot;&gt;&quot;[%s][ERROR]Notification deviceToken=&quot;&lt;/span&gt;+token+&lt;span class=&quot;string&quot;&gt;&quot; rejected by the APNs gateway:&quot;&lt;/span&gt; + pushNotificationResponse.getRejectionReason(),format.print(System.currentTimeMillis())));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          System.out.println(_.f(&lt;span class=&quot;string&quot;&gt;&quot;[%s][ERROR]send notification device token=&quot;&lt;/span&gt;+token+&lt;span class=&quot;string&quot;&gt;&quot; is failed:&quot;&lt;/span&gt; + future.cause().getMessage(),format.print(System.currentTimeMillis())));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      latch.countDown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      semaphore.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http:zhuhaijun.cn/categories/java/"/>
    
    
      <category term="java" scheme="http:zhuhaijun.cn/tags/java/"/>
    
      <category term="pushy" scheme="http:zhuhaijun.cn/tags/pushy/"/>
    
  </entry>
  
</feed>
